{"ast":null,"code":"var _jsxFileName = \"/Users/indigowolf/workspace/where_to_live/frontend/src/components/PopulationGrowthChart.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import {\n//   AreaChart,\n//   Area,\n//   XAxis,\n//   YAxis,\n//   CartesianGrid,\n//   Tooltip,\n//   Legend,\n//   ResponsiveContainer,\n// } from 'recharts';\n\n// const PopulationGrowthChart = () => {\n//   const [data, setData] = useState([]);\n\n//   useEffect(() => {\n//     fetch('http://localhost:5000/data')\n//       .then((response) => response.json())\n//       .then((fetchedData) => {\n//         const cities = [\n//           'Kailua, HI',\n//           'Columbia, MO',\n//           'Charlotte, NC',\n//           'Portland, OR',\n//           'Seattle, WA',\n//         ];\n//         const years = {\n//           'Population Estimates as of 2022': '2022 Population',\n//           'Population, Census, 2020': '2020 Population',\n//           'Population, Census, 2010': '2010 Population',\n//         };\n//         const processedData = cities.map((city) => {\n//           let cityData = { City: city };\n//           Object.entries(years).forEach(([yearKey, chartKey]) => {\n//             const yearData = fetchedData.find(\n//               (d) => d.Category === yearKey && d.City === city\n//             );\n//             cityData[chartKey] = yearData\n//               ? parseFloat(yearData.Value.replace(/,/g, ''))\n//               : 0;\n//           });\n//           return cityData;\n//         });\n//         console.log(processedData);\n//         setData(processedData);\n//       })\n//       .catch((error) => console.error('Error fetching data:', error));\n//   }, []);\n\n//   if (data.length === 0) {\n//     return <div>Loading...</div>;\n//   }\n\n//   return (\n//     <ResponsiveContainer width=\"100%\" height={400}>\n//       <AreaChart\n//         data={data}\n//         margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n//       >\n//         <CartesianGrid strokeDasharray=\"3 3\" />\n//         <XAxis dataKey=\"City\" />\n//         <YAxis />\n//         <Tooltip />\n//         <Legend />\n//         <Area\n//           type=\"monotone\"\n//           dataKey=\"2010 Population\"\n//           stroke=\"#8884d8\"\n//           fill=\"#8884d8\"\n//           fillOpacity={0.5}\n//           activeDot={{ r: 8 }}\n//         />\n//         <Area\n//           type=\"monotone\"\n//           dataKey=\"2020 Population\"\n//           stroke=\"#82ca9d\"\n//           fill=\"#82ca9d\"\n//           fillOpacity={0.3}\n//           activeDot={{ r: 8 }}\n//         />\n//         <Area\n//           type=\"monotone\"\n//           dataKey=\"2022 Population\"\n//           stroke=\"#ffc658\"\n//           fill=\"#ffc658\"\n//           fillOpacity={0.3}\n//           activeDot={{ r: 8 }}\n//         />\n//       </AreaChart>\n//     </ResponsiveContainer>\n//   );\n// };\n\n// export default PopulationGrowthChart;\n\nimport React, { useState, useEffect } from 'react';\nimport { ComposedChart, Line, Area, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PopulationGrowthChart = () => {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:5000/data').then(response => response.json()).then(fetchedData => {\n      // Assuming fetchedData is an array of objects with city names and other data\n      const cities = ['Kailua, HI', 'Columbia, MO', 'Charlotte, NC', 'Portland, OR', 'Seattle, WA'];\n      // Filter data to include only the cities listed above\n      const filteredData = fetchedData.filter(item => cities.includes(item.City));\n      setData(filteredData);\n    }).catch(error => console.error('Error fetching data:', error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 400,\n    children: /*#__PURE__*/_jsxDEV(ComposedChart, {\n      data: data,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        stroke: \"#f5f5f5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        yAxisId: \"left\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        yAxisId: \"right\",\n        orientation: \"right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        yAxisId: \"left\",\n        dataKey: \"Hourly Median Wage\",\n        barSize: 20,\n        fill: \"#413ea0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        yAxisId: \"right\",\n        type: \"monotone\",\n        dataKey: \"Median Gross Rent\",\n        stroke: \"#ff7300\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        yAxisId: \"right\",\n        type: \"monotone\",\n        dataKey: \"Total Jobs in Tech Sector\",\n        stroke: \"#387908\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n_s(PopulationGrowthChart, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = PopulationGrowthChart;\nexport default PopulationGrowthChart;\nvar _c;\n$RefreshReg$(_c, \"PopulationGrowthChart\");","map":{"version":3,"names":["React","useState","useEffect","ComposedChart","Line","Area","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","PopulationGrowthChart","_s","data","setData","fetch","then","response","json","fetchedData","cities","filteredData","filter","item","includes","City","catch","error","console","width","height","children","margin","top","right","bottom","left","stroke","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","yAxisId","orientation","barSize","fill","type","_c","$RefreshReg$"],"sources":["/Users/indigowolf/workspace/where_to_live/frontend/src/components/PopulationGrowthChart.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import {\n//   AreaChart,\n//   Area,\n//   XAxis,\n//   YAxis,\n//   CartesianGrid,\n//   Tooltip,\n//   Legend,\n//   ResponsiveContainer,\n// } from 'recharts';\n\n// const PopulationGrowthChart = () => {\n//   const [data, setData] = useState([]);\n\n//   useEffect(() => {\n//     fetch('http://localhost:5000/data')\n//       .then((response) => response.json())\n//       .then((fetchedData) => {\n//         const cities = [\n//           'Kailua, HI',\n//           'Columbia, MO',\n//           'Charlotte, NC',\n//           'Portland, OR',\n//           'Seattle, WA',\n//         ];\n//         const years = {\n//           'Population Estimates as of 2022': '2022 Population',\n//           'Population, Census, 2020': '2020 Population',\n//           'Population, Census, 2010': '2010 Population',\n//         };\n//         const processedData = cities.map((city) => {\n//           let cityData = { City: city };\n//           Object.entries(years).forEach(([yearKey, chartKey]) => {\n//             const yearData = fetchedData.find(\n//               (d) => d.Category === yearKey && d.City === city\n//             );\n//             cityData[chartKey] = yearData\n//               ? parseFloat(yearData.Value.replace(/,/g, ''))\n//               : 0;\n//           });\n//           return cityData;\n//         });\n//         console.log(processedData);\n//         setData(processedData);\n//       })\n//       .catch((error) => console.error('Error fetching data:', error));\n//   }, []);\n\n//   if (data.length === 0) {\n//     return <div>Loading...</div>;\n//   }\n\n//   return (\n//     <ResponsiveContainer width=\"100%\" height={400}>\n//       <AreaChart\n//         data={data}\n//         margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n//       >\n//         <CartesianGrid strokeDasharray=\"3 3\" />\n//         <XAxis dataKey=\"City\" />\n//         <YAxis />\n//         <Tooltip />\n//         <Legend />\n//         <Area\n//           type=\"monotone\"\n//           dataKey=\"2010 Population\"\n//           stroke=\"#8884d8\"\n//           fill=\"#8884d8\"\n//           fillOpacity={0.5}\n//           activeDot={{ r: 8 }}\n//         />\n//         <Area\n//           type=\"monotone\"\n//           dataKey=\"2020 Population\"\n//           stroke=\"#82ca9d\"\n//           fill=\"#82ca9d\"\n//           fillOpacity={0.3}\n//           activeDot={{ r: 8 }}\n//         />\n//         <Area\n//           type=\"monotone\"\n//           dataKey=\"2022 Population\"\n//           stroke=\"#ffc658\"\n//           fill=\"#ffc658\"\n//           fillOpacity={0.3}\n//           activeDot={{ r: 8 }}\n//         />\n//       </AreaChart>\n//     </ResponsiveContainer>\n//   );\n// };\n\n// export default PopulationGrowthChart;\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  ComposedChart,\n  Line,\n  Area,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\n\nconst PopulationGrowthChart = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:5000/data')\n      .then((response) => response.json())\n      .then((fetchedData) => {\n        // Assuming fetchedData is an array of objects with city names and other data\n        const cities = [\n          'Kailua, HI',\n          'Columbia, MO',\n          'Charlotte, NC',\n          'Portland, OR',\n          'Seattle, WA',\n        ];\n        // Filter data to include only the cities listed above\n        const filteredData = fetchedData.filter((item) =>\n          cities.includes(item.City)\n        );\n        setData(filteredData);\n      })\n      .catch((error) => console.error('Error fetching data:', error));\n  }, []);\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={400}>\n      <ComposedChart\n        data={data}\n        margin={{\n          top: 20,\n          right: 20,\n          bottom: 20,\n          left: 20,\n        }}\n      >\n        <CartesianGrid stroke=\"#f5f5f5\" />\n        <XAxis dataKey=\"City\" />\n        <YAxis yAxisId=\"left\" />\n        <YAxis yAxisId=\"right\" orientation=\"right\" />\n        <Tooltip />\n        <Legend />\n        <Bar\n          yAxisId=\"left\"\n          dataKey=\"Hourly Median Wage\"\n          barSize={20}\n          fill=\"#413ea0\"\n        />\n        <Line\n          yAxisId=\"right\"\n          type=\"monotone\"\n          dataKey=\"Median Gross Rent\"\n          stroke=\"#ff7300\"\n        />\n        <Line\n          yAxisId=\"right\"\n          type=\"monotone\"\n          dataKey=\"Total Jobs in Tech Sector\"\n          stroke=\"#387908\"\n        />\n      </ComposedChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default PopulationGrowthChart;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,aAAa,EACbC,IAAI,EACJC,IAAI,EACJC,GAAG,EACHC,KAAK,EACLC,KAAK,EACLC,aAAa,EACbC,OAAO,EACPC,MAAM,EACNC,mBAAmB,QACd,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElB,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACdiB,KAAK,CAAC,4BAA4B,CAAC,CAChCC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,WAAW,IAAK;MACrB;MACA,MAAMC,MAAM,GAAG,CACb,YAAY,EACZ,cAAc,EACd,eAAe,EACf,cAAc,EACd,aAAa,CACd;MACD;MACA,MAAMC,YAAY,GAAGF,WAAW,CAACG,MAAM,CAAEC,IAAI,IAC3CH,MAAM,CAACI,QAAQ,CAACD,IAAI,CAACE,IAAI,CAC3B,CAAC;MACDX,OAAO,CAACO,YAAY,CAAC;IACvB,CAAC,CAAC,CACDK,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;EACnE,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEjB,OAAA,CAACF,mBAAmB;IAACqB,KAAK,EAAC,MAAM;IAACC,MAAM,EAAE,GAAI;IAAAC,QAAA,eAC5CrB,OAAA,CAACX,aAAa;MACZc,IAAI,EAAEA,IAAK;MACXmB,MAAM,EAAE;QACNC,GAAG,EAAE,EAAE;QACPC,KAAK,EAAE,EAAE;QACTC,MAAM,EAAE,EAAE;QACVC,IAAI,EAAE;MACR,CAAE;MAAAL,QAAA,gBAEFrB,OAAA,CAACL,aAAa;QAACgC,MAAM,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAClC/B,OAAA,CAACP,KAAK;QAACuC,OAAO,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACxB/B,OAAA,CAACN,KAAK;QAACuC,OAAO,EAAC;MAAM;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACxB/B,OAAA,CAACN,KAAK;QAACuC,OAAO,EAAC,OAAO;QAACC,WAAW,EAAC;MAAO;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC7C/B,OAAA,CAACJ,OAAO;QAAAgC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACX/B,OAAA,CAACH,MAAM;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACV/B,OAAA,CAACR,GAAG;QACFyC,OAAO,EAAC,MAAM;QACdD,OAAO,EAAC,oBAAoB;QAC5BG,OAAO,EAAE,EAAG;QACZC,IAAI,EAAC;MAAS;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACf,CAAC,eACF/B,OAAA,CAACV,IAAI;QACH2C,OAAO,EAAC,OAAO;QACfI,IAAI,EAAC,UAAU;QACfL,OAAO,EAAC,mBAAmB;QAC3BL,MAAM,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjB,CAAC,eACF/B,OAAA,CAACV,IAAI;QACH2C,OAAO,EAAC,OAAO;QACfI,IAAI,EAAC,UAAU;QACfL,OAAO,EAAC,2BAA2B;QACnCL,MAAM,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACW;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAE1B,CAAC;AAAC7B,EAAA,CA9DID,qBAAqB;AAAAqC,EAAA,GAArBrC,qBAAqB;AAgE3B,eAAeA,qBAAqB;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}