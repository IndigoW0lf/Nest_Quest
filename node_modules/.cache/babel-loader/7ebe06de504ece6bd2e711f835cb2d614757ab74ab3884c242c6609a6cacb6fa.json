{"ast":null,"code":"var _jsxFileName = \"/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DataVisualization() {\n  _s();\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [categories, setCategories] = useState([]); // Correct initialization\n  const [chartData, setChartData] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:5000/data').then(response => response.json()).then(fetchedData => {\n      // Assuming the first row contains the category names\n      if (fetchedData.length > 0) {\n        const allCategories = Object.keys(fetchedData[0]).filter(key => !['City', 'Lat', 'Lon'].includes(key));\n        setCategories(allCategories.map(category => ({\n          value: category,\n          label: category\n        })));\n\n        // Set default category for selection\n        setSelectedCategory(allCategories[0]);\n      }\n\n      // No need to parse here; keep data as-is for now\n      setData(fetchedData);\n    }).catch(error => console.error('Error fetching data:', error));\n  }, []);\n  useEffect(() => {\n    // Transform data based on selectedCategory for charting\n    const preparedData = data.map(item => ({\n      City: item.City,\n      Value: item[selectedCategory] // Directly use the value; ensure parsing in the tooltip or yAxis tickFormatter if needed\n    }));\n    setChartData(preparedData);\n  }, [selectedCategory, data]);\n  const formatTooltipValue = (value, name) => {\n    // Add specific parsing logic here if necessary, similar to previous implementations\n    return value;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      options: categories,\n      onChange: option => setSelectedCategory(option.value),\n      value: categories.find(option => option.value === selectedCategory)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: chartData,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"City\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: formatTooltipValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Value\",\n          name: selectedCategory,\n          stroke: \"#8884d8\",\n          activeDot: {\n            r: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(DataVisualization, \"Ns29I+rZJpi+Jjj+sWEGg+cnyaE=\");\n_c = DataVisualization;\nexport default DataVisualization;\nvar _c;\n$RefreshReg$(_c, \"DataVisualization\");","map":{"version":3,"names":["React","useEffect","useState","Select","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","DataVisualization","_s","data","setData","selectedCategory","setSelectedCategory","categories","setCategories","chartData","setChartData","fetch","then","response","json","fetchedData","length","allCategories","Object","keys","filter","key","includes","map","category","value","label","catch","error","console","preparedData","item","City","Value","formatTooltipValue","name","children","options","onChange","option","find","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","formatter","type","stroke","activeDot","r","_c","$RefreshReg$"],"sources":["/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\n\nfunction DataVisualization() {\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [categories, setCategories] = useState([]); // Correct initialization\n  const [chartData, setChartData] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:5000/data')\n      .then((response) => response.json())\n      .then((fetchedData) => {\n        // Assuming the first row contains the category names\n        if (fetchedData.length > 0) {\n          const allCategories = Object.keys(fetchedData[0]).filter(\n            (key) => !['City', 'Lat', 'Lon'].includes(key)\n          );\n          setCategories(\n            allCategories.map((category) => ({\n              value: category,\n              label: category,\n            }))\n          );\n\n          // Set default category for selection\n          setSelectedCategory(allCategories[0]);\n        }\n\n        // No need to parse here; keep data as-is for now\n        setData(fetchedData);\n      })\n      .catch((error) => console.error('Error fetching data:', error));\n  }, []);\n\n  useEffect(() => {\n    // Transform data based on selectedCategory for charting\n    const preparedData = data.map((item) => ({\n      City: item.City,\n      Value: item[selectedCategory], // Directly use the value; ensure parsing in the tooltip or yAxis tickFormatter if needed\n    }));\n\n    setChartData(preparedData);\n  }, [selectedCategory, data]);\n\n  const formatTooltipValue = (value, name) => {\n    // Add specific parsing logic here if necessary, similar to previous implementations\n    return value;\n  };\n\n  return (\n    <div>\n      <Select\n        options={categories}\n        onChange={(option) => setSelectedCategory(option.value)}\n        value={categories.find((option) => option.value === selectedCategory)}\n      />\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"City\" />\n          <YAxis />\n          <Tooltip formatter={formatTooltipValue} />\n          <Legend />\n          <Line\n            type=\"monotone\"\n            dataKey=\"Value\"\n            name={selectedCategory}\n            stroke=\"#8884d8\"\n            activeDot={{ r: 8 }}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default DataVisualization;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}