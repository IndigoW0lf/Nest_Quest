{"ast":null,"code":"var _jsxFileName = \"/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport Sidebar from './Sidebar';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// Constants for monetary and percentage categories\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monetaryCategories = ['Median value of owner-occupied housing units', 'Median selected monthly owner costs with a mortgage', 'Median gross rent', 'Per capita income in past 12 months (2022)', 'Annual 10th percentile wage', 'Annual median wage', 'Annual 90th percentile wage'];\nconst percentageCategories = ['Population change from 2020 to 2022', 'People under 5 years old', 'People under 18 years old', 'People 65 years and over', 'Women population', 'White population alone', 'Native Hawaiian and Other Pacific Islander population alone', 'Population of Two or More Races', 'Hispanic or Latino population', \"Bachelor's degree or higher\", 'In civilian labor force, total population age 16+ years', 'In civilian labor force, female population age 16+ years', 'Persons in poverty'];\nfunction DataVisualization() {\n  _s();\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:5000/data').then(response => response.json()).then(data => {\n      const numericData = data.map(item => {\n        let value = item.Value.replace(/[^0-9.-]+/g, ''); // Remove $ and % for numeric parsing\n        value = parseFloat(value);\n        return {\n          ...item,\n          Value: value\n        };\n      });\n      setData(numericData);\n      const uniqueCategories = [...new Set(numericData.map(item => item.Category))].map(category => ({\n        value: category,\n        label: category\n      }));\n      setCategories(uniqueCategories);\n      if (uniqueCategories.length) setSelectedCategory(uniqueCategories[0].value);\n    }).catch(error => console.error('Error fetching data:', error));\n  }, []);\n  const formatTooltipValue = (value, name, props) => {\n    const category = props.payload.Category;\n    if (monetaryCategories.includes(category)) {\n      return `$${value.toLocaleString()}`;\n    } else if (percentageCategories.includes(category)) {\n      return `${value}%`;\n    }\n    return value.toLocaleString();\n  };\n\n  // Inside your DataVisualization component\n  const [filters, setFilters] = useState({\n    location: [],\n    medianIncomeRange: [0, 200000]\n  });\n\n  // Filtering data before rendering the chart\n  const filteredData = data.filter(item => {\n    // Apply each filter to the dataset\n    const matchesLocation = filters.location.length === 0 || filters.location.includes(item.City);\n    const matchesIncome = item['Median household income (2022)'] >= filters.medianIncomeRange[0] && item['Median household income (2022)'] <= filters.medianIncomeRange[1];\n    // Add more conditions as needed\n\n    return matchesLocation && matchesIncome; // Ensure all conditions are met\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      filters: filters,\n      setFilters: setFilters,\n      cities: data.map(d => d.City).filter((value, index, self) => self.indexOf(value) === index) // Extract unique cities from your data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      options: categories,\n      onChange: option => setSelectedCategory(option.value),\n      value: categories.find(option => option.value === selectedCategory)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: filteredData,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"City\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: formatTooltipValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Value\",\n          stroke: \"#8884d8\",\n          activeDot: {\n            r: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(DataVisualization, \"5QlxkbV9kFmZF8NrctrScB+zZU8=\");\n_c = DataVisualization;\nexport default DataVisualization;\nvar _c;\n$RefreshReg$(_c, \"DataVisualization\");","map":{"version":3,"names":["React","useEffect","useState","Select","Sidebar","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","monetaryCategories","percentageCategories","DataVisualization","_s","data","setData","selectedCategory","setSelectedCategory","categories","setCategories","fetch","then","response","json","numericData","map","item","value","Value","replace","parseFloat","uniqueCategories","Set","Category","category","label","length","catch","error","console","formatTooltipValue","name","props","payload","includes","toLocaleString","filters","setFilters","location","medianIncomeRange","filteredData","filter","matchesLocation","City","matchesIncome","children","cities","d","index","self","indexOf","fileName","_jsxFileName","lineNumber","columnNumber","options","onChange","option","find","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","formatter","type","stroke","activeDot","r","_c","$RefreshReg$"],"sources":["/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport Sidebar from './Sidebar';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\n\n// Constants for monetary and percentage categories\nconst monetaryCategories = [\n  'Median value of owner-occupied housing units',\n  'Median selected monthly owner costs with a mortgage',\n  'Median gross rent',\n  'Per capita income in past 12 months (2022)',\n  'Annual 10th percentile wage',\n  'Annual median wage',\n  'Annual 90th percentile wage',\n];\n\nconst percentageCategories = [\n  'Population change from 2020 to 2022',\n  'People under 5 years old',\n  'People under 18 years old',\n  'People 65 years and over',\n  'Women population',\n  'White population alone',\n  'Native Hawaiian and Other Pacific Islander population alone',\n  'Population of Two or More Races',\n  'Hispanic or Latino population',\n  \"Bachelor's degree or higher\",\n  'In civilian labor force, total population age 16+ years',\n  'In civilian labor force, female population age 16+ years',\n  'Persons in poverty',\n];\n\nfunction DataVisualization() {\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [categories, setCategories] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:5000/data')\n      .then((response) => response.json())\n      .then((data) => {\n        const numericData = data.map((item) => {\n          let value = item.Value.replace(/[^0-9.-]+/g, ''); // Remove $ and % for numeric parsing\n          value = parseFloat(value);\n          return { ...item, Value: value };\n        });\n        setData(numericData);\n        const uniqueCategories = [\n          ...new Set(numericData.map((item) => item.Category)),\n        ].map((category) => ({ value: category, label: category }));\n        setCategories(uniqueCategories);\n        if (uniqueCategories.length)\n          setSelectedCategory(uniqueCategories[0].value);\n      })\n      .catch((error) => console.error('Error fetching data:', error));\n  }, []);\n\n  const formatTooltipValue = (value, name, props) => {\n    const category = props.payload.Category;\n    if (monetaryCategories.includes(category)) {\n      return `$${value.toLocaleString()}`;\n    } else if (percentageCategories.includes(category)) {\n      return `${value}%`;\n    }\n    return value.toLocaleString();\n  };\n\n  // Inside your DataVisualization component\n  const [filters, setFilters] = useState({\n    location: [],\n    medianIncomeRange: [0, 200000],\n  });\n\n  // Filtering data before rendering the chart\n  const filteredData = data.filter((item) => {\n    // Apply each filter to the dataset\n    const matchesLocation =\n      filters.location.length === 0 || filters.location.includes(item.City);\n    const matchesIncome =\n      item['Median household income (2022)'] >= filters.medianIncomeRange[0] &&\n      item['Median household income (2022)'] <= filters.medianIncomeRange[1];\n    // Add more conditions as needed\n\n    return matchesLocation && matchesIncome; // Ensure all conditions are met\n  });\n\n  return (\n    <div>\n      <Sidebar\n        filters={filters}\n        setFilters={setFilters}\n        cities={data\n          .map((d) => d.City)\n          .filter((value, index, self) => self.indexOf(value) === index)} // Extract unique cities from your data\n      />\n      <Select\n        options={categories}\n        onChange={(option) => setSelectedCategory(option.value)}\n        value={categories.find((option) => option.value === selectedCategory)}\n      />\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <LineChart\n          data={filteredData}\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"City\" />\n          <YAxis />\n          <Tooltip formatter={formatTooltipValue} />\n          <Legend />\n          <Line\n            type=\"monotone\"\n            dataKey=\"Value\"\n            stroke=\"#8884d8\"\n            activeDot={{ r: 8 }}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default DataVisualization;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}