{"ast":null,"code":"var _jsxFileName = \"/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// Updated monetary and percentage categories to match your CSV\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monetaryCategories = ['Median value of owner-occupied housing units', 'Median selected monthly owner costs with a mortgage', 'Median gross rent', 'Per capita income in past 12 months (2022)', 'Annual 10th percentile wage', 'Annual median wage', 'Annual 90th percentile wage'];\nconst percentageCategories = ['Population change from 2020 to 2022', 'People under 5 years old', 'People under 18 years old', 'People 65 years and over', 'Women population', 'White population alone', 'Native Hawaiian and Other Pacific Islander population alone', 'Population of Two or More Races', 'Hispanic or Latino population', \"Bachelor's degree or higher\", 'In civilian labor force, total population age 16+ years', 'In civilian labor force, female population age 16+ years', 'Persons in poverty'];\nfunction DataVisualization() {\n  _s();\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    // Placeholder for your data loading logic\n    // Assume data is loaded and parsed here as per your previous logic\n  }, []);\n  const handleCategoryChange = selectedOption => {\n    setSelectedCategory(selectedOption.value);\n  };\n  const renderLineChart = (data, category) => {\n    // Determine if the current category requires special formatting\n    const isMonetary = monetaryCategories.includes(category);\n    const isPercentage = percentageCategories.includes(category);\n    return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        width: 500,\n        height: 300,\n        data: data,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          tickFormatter: value => {\n            if (isMonetary) return `$${value.toLocaleString()}`;\n            if (isPercentage) return `${value}%`;\n            return value;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: (value, name, props) => {\n            if (isMonetary) return [`$${value.toLocaleString()}`, name];\n            if (isPercentage) return [`${value}%`, name];\n            return [value, name];\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"value\",\n          stroke: \"#8884d8\",\n          activeDot: {\n            r: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      value: categories.find(option => option.value === selectedCategory),\n      onChange: handleCategoryChange,\n      options: categories\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), selectedCategory && renderLineChart(data.filter(item => item.Category === selectedCategory), selectedCategory)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(DataVisualization, \"Q0Lx6UFegBqZj+TGeKl6qnDJNEo=\");\n_c = DataVisualization;\nexport default DataVisualization;\nvar _c;\n$RefreshReg$(_c, \"DataVisualization\");","map":{"version":3,"names":["React","useEffect","useState","Select","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","monetaryCategories","percentageCategories","DataVisualization","_s","data","setData","selectedCategory","setSelectedCategory","categories","setCategories","handleCategoryChange","selectedOption","value","renderLineChart","category","isMonetary","includes","isPercentage","width","height","children","margin","top","right","left","bottom","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","tickFormatter","toLocaleString","formatter","name","props","type","stroke","activeDot","r","find","option","onChange","options","filter","item","Category","_c","$RefreshReg$"],"sources":["/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\n\n// Updated monetary and percentage categories to match your CSV\nconst monetaryCategories = [\n  'Median value of owner-occupied housing units',\n  'Median selected monthly owner costs with a mortgage',\n  'Median gross rent',\n  'Per capita income in past 12 months (2022)',\n  'Annual 10th percentile wage',\n  'Annual median wage',\n  'Annual 90th percentile wage',\n];\n\nconst percentageCategories = [\n  'Population change from 2020 to 2022',\n  'People under 5 years old',\n  'People under 18 years old',\n  'People 65 years and over',\n  'Women population',\n  'White population alone',\n  'Native Hawaiian and Other Pacific Islander population alone',\n  'Population of Two or More Races',\n  'Hispanic or Latino population',\n  \"Bachelor's degree or higher\",\n  'In civilian labor force, total population age 16+ years',\n  'In civilian labor force, female population age 16+ years',\n  'Persons in poverty',\n];\n\nfunction DataVisualization() {\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [categories, setCategories] = useState([]);\n\n  useEffect(() => {\n    // Placeholder for your data loading logic\n    // Assume data is loaded and parsed here as per your previous logic\n  }, []);\n\n  const handleCategoryChange = (selectedOption) => {\n    setSelectedCategory(selectedOption.value);\n  };\n\n  const renderLineChart = (data, category) => {\n    // Determine if the current category requires special formatting\n    const isMonetary = monetaryCategories.includes(category);\n    const isPercentage = percentageCategories.includes(category);\n\n    return (\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <LineChart\n          width={500}\n          height={300}\n          data={data}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis\n            tickFormatter={(value) => {\n              if (isMonetary) return `$${value.toLocaleString()}`;\n              if (isPercentage) return `${value}%`;\n              return value;\n            }}\n          />\n          <Tooltip\n            formatter={(value, name, props) => {\n              if (isMonetary) return [`$${value.toLocaleString()}`, name];\n              if (isPercentage) return [`${value}%`, name];\n              return [value, name];\n            }}\n          />\n          <Legend />\n          <Line\n            type=\"monotone\"\n            dataKey=\"value\"\n            stroke=\"#8884d8\"\n            activeDot={{ r: 8 }}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    );\n  };\n\n  return (\n    <div>\n      <Select\n        value={categories.find((option) => option.value === selectedCategory)}\n        onChange={handleCategoryChange}\n        options={categories}\n      />\n      {selectedCategory &&\n        renderLineChart(\n          data.filter((item) => item.Category === selectedCategory),\n          selectedCategory\n        )}\n    </div>\n  );\n}\n\nexport default DataVisualization;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}