{"ast":null,"code":"var _jsxFileName = \"/Users/indigowolf/workspace/where_to_live/frontend/src/components/PopulationGrowthChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PopulationGrowthChart = () => {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:5000/data').then(response => response.json()).then(data => {\n      const cities = ['Kailua, HI', 'Columbia, MO', 'Sacramento, CA', 'Portland, OR', 'Charlotte, NC', 'Seattle, WA'];\n      const years = ['Population Estimates as of 2022', 'Population, Census, 2020', 'Population, Census, 2010']; // Define the years or categories you are interested in\n      const processedData = cities.map(city => {\n        let cityData = {\n          City: city\n        };\n        years.forEach(year => {\n          // Assume data is structured with years as keys and city names as part of the objects\n          const yearData = data.find(d => d.Category === year);\n          cityData[year] = yearData ? parseFloat(yearData[city].replace(/,/g, '')) : 0; // Parse and remove commas for numerical values\n        });\n        return cityData;\n      });\n      console.log(processedData); // Debug to ensure data is structured correctly\n      setData(processedData);\n    }).catch(error => console.error('Error fetching data:', error));\n  }, []);\n  if (data.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 400,\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      data: data,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"Population2010\",\n        stroke: \"#8884d8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"Population2020\",\n        stroke: \"#82ca9d\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"Population2022\",\n        stroke: \"#ffc658\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(PopulationGrowthChart, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = PopulationGrowthChart;\nexport default PopulationGrowthChart;\nvar _c;\n$RefreshReg$(_c, \"PopulationGrowthChart\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","PopulationGrowthChart","_s","data","setData","fetch","then","response","json","cities","years","processedData","map","city","cityData","City","forEach","year","yearData","find","d","Category","parseFloat","replace","console","log","catch","error","length","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","_c","$RefreshReg$"],"sources":["/Users/indigowolf/workspace/where_to_live/frontend/src/components/PopulationGrowthChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\n\nconst PopulationGrowthChart = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:5000/data')\n      .then((response) => response.json())\n      .then((data) => {\n        const cities = [\n          'Kailua, HI',\n          'Columbia, MO',\n          'Sacramento, CA',\n          'Portland, OR',\n          'Charlotte, NC',\n          'Seattle, WA',\n        ];\n        const years = [\n          'Population Estimates as of 2022',\n          'Population, Census, 2020',\n          'Population, Census, 2010',\n        ]; // Define the years or categories you are interested in\n        const processedData = cities.map((city) => {\n          let cityData = { City: city };\n          years.forEach((year) => {\n            // Assume data is structured with years as keys and city names as part of the objects\n            const yearData = data.find((d) => d.Category === year);\n            cityData[year] = yearData\n              ? parseFloat(yearData[city].replace(/,/g, ''))\n              : 0; // Parse and remove commas for numerical values\n          });\n          return cityData;\n        });\n        console.log(processedData); // Debug to ensure data is structured correctly\n        setData(processedData);\n      })\n      .catch((error) => console.error('Error fetching data:', error));\n  }, []);\n\n\n  if (data.length === 0) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={400}>\n      <LineChart\n        data={data}\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"City\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"Population2010\" stroke=\"#8884d8\" />\n        <Line type=\"monotone\" dataKey=\"Population2020\" stroke=\"#82ca9d\" />\n        <Line type=\"monotone\" dataKey=\"Population2022\" stroke=\"#ffc658\" />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default PopulationGrowthChart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,SAAS,EACTC,IAAI,EACJC,KAAK,EACLC,KAAK,EACLC,aAAa,EACbC,OAAO,EACPC,MAAM,EACNC,mBAAmB,QACd,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElB,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACde,KAAK,CAAC,4BAA4B,CAAC,CAChCC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEH,IAAI,IAAK;MACd,MAAMM,MAAM,GAAG,CACb,YAAY,EACZ,cAAc,EACd,gBAAgB,EAChB,cAAc,EACd,eAAe,EACf,aAAa,CACd;MACD,MAAMC,KAAK,GAAG,CACZ,iCAAiC,EACjC,0BAA0B,EAC1B,0BAA0B,CAC3B,CAAC,CAAC;MACH,MAAMC,aAAa,GAAGF,MAAM,CAACG,GAAG,CAAEC,IAAI,IAAK;QACzC,IAAIC,QAAQ,GAAG;UAAEC,IAAI,EAAEF;QAAK,CAAC;QAC7BH,KAAK,CAACM,OAAO,CAAEC,IAAI,IAAK;UACtB;UACA,MAAMC,QAAQ,GAAGf,IAAI,CAACgB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,QAAQ,KAAKJ,IAAI,CAAC;UACtDH,QAAQ,CAACG,IAAI,CAAC,GAAGC,QAAQ,GACrBI,UAAU,CAACJ,QAAQ,CAACL,IAAI,CAAC,CAACU,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,GAC5C,CAAC,CAAC,CAAC;QACT,CAAC,CAAC;QACF,OAAOT,QAAQ;MACjB,CAAC,CAAC;MACFU,OAAO,CAACC,GAAG,CAACd,aAAa,CAAC,CAAC,CAAC;MAC5BP,OAAO,CAACO,aAAa,CAAC;IACxB,CAAC,CAAC,CACDe,KAAK,CAAEC,KAAK,IAAKH,OAAO,CAACG,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;EACnE,CAAC,EAAE,EAAE,CAAC;EAGN,IAAIxB,IAAI,CAACyB,MAAM,KAAK,CAAC,EAAE;IACrB,oBAAO5B,OAAA;MAAA6B,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,oBACEjC,OAAA,CAACF,mBAAmB;IAACoC,KAAK,EAAC,MAAM;IAACC,MAAM,EAAE,GAAI;IAAAN,QAAA,eAC5C7B,OAAA,CAACT,SAAS;MACRY,IAAI,EAAEA,IAAK;MACXiC,MAAM,EAAE;QAAEC,GAAG,EAAE,CAAC;QAAEC,KAAK,EAAE,EAAE;QAAEC,IAAI,EAAE,EAAE;QAAEC,MAAM,EAAE;MAAE,CAAE;MAAAX,QAAA,gBAEnD7B,OAAA,CAACL,aAAa;QAAC8C,eAAe,EAAC;MAAK;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACvCjC,OAAA,CAACP,KAAK;QAACiD,OAAO,EAAC;MAAM;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACxBjC,OAAA,CAACN,KAAK;QAAAoC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACTjC,OAAA,CAACJ,OAAO;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACXjC,OAAA,CAACH,MAAM;QAAAiC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACVjC,OAAA,CAACR,IAAI;QAACmD,IAAI,EAAC,UAAU;QAACD,OAAO,EAAC,gBAAgB;QAACE,MAAM,EAAC;MAAS;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAClEjC,OAAA,CAACR,IAAI;QAACmD,IAAI,EAAC,UAAU;QAACD,OAAO,EAAC,gBAAgB;QAACE,MAAM,EAAC;MAAS;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAClEjC,OAAA,CAACR,IAAI;QAACmD,IAAI,EAAC,UAAU;QAACD,OAAO,EAAC,gBAAgB;QAACE,MAAM,EAAC;MAAS;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAE1B,CAAC;AAAC/B,EAAA,CA3DID,qBAAqB;AAAA4C,EAAA,GAArB5C,qBAAqB;AA6D3B,eAAeA,qBAAqB;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}