{"ast":null,"code":"var _jsxFileName = \"/Users/indigowolf/workspace/where_to_live/frontend/src/components/PopulationGrowthChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PopulationGrowthChart = () => {\n  _s();\n  const [dataForCharts, setDataForCharts] = useState([]);\n  useEffect(() => {\n    const csvFilePath = 'backend/data/data.csv'; // Update this path to your CSV file's location\n    fetch(csvFilePath).then(response => response.text()).then(csvData => Papa.parse(csvData, {\n      header: true,\n      skipEmptyLines: true\n    })).then(result => {\n      const processedData = processData(result.data);\n      setDataForCharts(processedData);\n    }).catch(error => console.error('Error loading CSV:', error));\n  }, []);\n  const processData = rawData => {\n    return rawData.map(entry => {\n      const category = entry['Category'];\n      const dataPoints = Object.entries(entry).reduce((acc, [key, value]) => {\n        if (key !== 'Category') acc.push({\n          name: key,\n          value: parseFloat(value) || 0\n        });\n        return acc;\n      }, []);\n      return {\n        category,\n        dataPoints\n      };\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: dataForCharts.map(({\n      category,\n      dataPoints\n    }, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: category\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 400,\n        children: /*#__PURE__*/_jsxDEV(BarChart, {\n          data: dataPoints,\n          margin: {\n            top: 20,\n            right: 30,\n            left: 20,\n            bottom: 5\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Bar, {\n            dataKey: \"value\",\n            fill: \"#8884d8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)]\n    }, idx, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(PopulationGrowthChart, \"8Uw3F325Hndr/1Ikmlqo5a0E+k4=\");\n_c = PopulationGrowthChart;\nexport default PopulationGrowthChart;\nvar _c;\n$RefreshReg$(_c, \"PopulationGrowthChart\");","map":{"version":3,"names":["React","useState","useEffect","Papa","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","PopulationGrowthChart","_s","dataForCharts","setDataForCharts","csvFilePath","fetch","then","response","text","csvData","parse","header","skipEmptyLines","result","processedData","processData","data","catch","error","console","rawData","map","entry","category","dataPoints","Object","entries","reduce","acc","key","value","push","name","parseFloat","children","idx","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","fill","_c","$RefreshReg$"],"sources":["/Users/indigowolf/workspace/where_to_live/frontend/src/components/PopulationGrowthChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\n\nconst PopulationGrowthChart = () => {\n  const [dataForCharts, setDataForCharts] = useState([]);\n\n  useEffect(() => {\n    const csvFilePath = 'backend/data/data.csv'; // Update this path to your CSV file's location\n    fetch(csvFilePath)\n      .then((response) => response.text())\n      .then((csvData) =>\n        Papa.parse(csvData, { header: true, skipEmptyLines: true })\n      )\n      .then((result) => {\n        const processedData = processData(result.data);\n        setDataForCharts(processedData);\n      })\n      .catch((error) => console.error('Error loading CSV:', error));\n  }, []);\n\n  const processData = (rawData) => {\n    return rawData.map((entry) => {\n      const category = entry['Category'];\n      const dataPoints = Object.entries(entry).reduce((acc, [key, value]) => {\n        if (key !== 'Category')\n          acc.push({ name: key, value: parseFloat(value) || 0 });\n        return acc;\n      }, []);\n      return { category, dataPoints };\n    });\n  };\n\n  return (\n    <div>\n      {dataForCharts.map(({ category, dataPoints }, idx) => (\n        <div key={idx}>\n          <h3>{category}</h3>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              data={dataPoints}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"value\" fill=\"#8884d8\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default PopulationGrowthChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}