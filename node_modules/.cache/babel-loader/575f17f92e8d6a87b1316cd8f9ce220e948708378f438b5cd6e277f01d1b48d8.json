{"ast":null,"code":"var _jsxFileName = \"/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// Define monetary and percentage categories\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monetaryCategories = ['Median household income (in 2022 dollars)', 'Median value of owner-occupied housing units, 2018-2022', 'Median selected monthly owner costs -with a mortgage, 2018-2022', 'Median selected monthly owner costs -without a mortgage, 2018-2022', 'Median gross rent, 2018-2022'\n// Add more categories as needed\n];\nconst percentageCategories = ['Percentage of people under 5 years old', 'Percentage of people under 18 years old', 'Percentage of people 65 years and over', 'Percent women', 'Percent White alone', 'Percent Native Hawaiian and Other Pacific Islander alone', 'Population, percent change - 2020 to 2022', 'Percent Two or More Races', 'Percent Hispanic or Latino'\n\n// Add more categories as needed\n];\nfunction DataVisualization() {\n  _s();\n  // Initialize state here\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:5000/data').then(response => response.json()).then(data => {\n      const parsedData = data.map(item => {\n        let value = item.Value;\n        if (percentageCategories.includes(item.Category)) {\n          value = parseFloat(value.replace(/[^0-9.]/g, ''));\n        } else if (!monetaryCategories.includes(item.Category)) {\n          value = parseFloat(value.replace(/[$,]/g, ''));\n        }\n        return {\n          ...item,\n          Value: value\n        };\n      });\n      setData(parsedData);\n      const categoryOptions = parsedData.reduce((acc, {\n        Category\n      }) => {\n        if (!acc.some(option => option.value === Category)) {\n          acc.push({\n            value: Category,\n            label: Category\n          });\n        }\n        return acc;\n      }, []);\n      setCategories(categoryOptions);\n      if (categoryOptions.length > 0) {\n        setSelectedCategory(categoryOptions[0].value); // Default to first category\n      }\n    }).catch(error => console.error('Error:', error));\n  }, []);\n  const formatTooltipValue = (value, name, props) => {\n    const category = props.payload.Category;\n    if (monetaryCategories.includes(category)) {\n      return `$${Number(value).toLocaleString()}`;\n    } else if (percentageCategories.includes(category)) {\n      return `${value}%`;\n    }\n    return value.toLocaleString();\n  };\n  const filteredData = selectedCategory ? data.filter(item => item.Category === selectedCategory) : [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      options: categories,\n      onChange: selectedOption => setSelectedCategory(selectedOption.value),\n      value: categories.find(option => option.value === selectedCategory)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: filteredData,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"City\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: (value, name, props) => formatTooltipValue(value, name, props)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Value\",\n          stroke: \"#8884d8\",\n          strokeWidth: 2,\n          dot: {\n            stroke: '#8884d8',\n            strokeWidth: 2,\n            fill: '#ffffff'\n          },\n          activeDot: {\n            r: 8,\n            fill: '#8884d8'\n          },\n          animationDuration: 3000\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(DataVisualization, \"Q0Lx6UFegBqZj+TGeKl6qnDJNEo=\");\n_c = DataVisualization;\nexport default DataVisualization;\nvar _c;\n$RefreshReg$(_c, \"DataVisualization\");","map":{"version":3,"names":["React","useEffect","useState","Select","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","monetaryCategories","percentageCategories","DataVisualization","_s","data","setData","selectedCategory","setSelectedCategory","categories","setCategories","fetch","then","response","json","parsedData","map","item","value","Value","includes","Category","parseFloat","replace","categoryOptions","reduce","acc","some","option","push","label","length","catch","error","console","formatTooltipValue","name","props","category","payload","Number","toLocaleString","filteredData","filter","children","options","onChange","selectedOption","find","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","formatter","type","stroke","strokeWidth","dot","fill","activeDot","r","animationDuration","_c","$RefreshReg$"],"sources":["/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\n\n// Define monetary and percentage categories\nconst monetaryCategories = [\n  'Median household income (in 2022 dollars)',\n  'Median value of owner-occupied housing units, 2018-2022',\n  'Median selected monthly owner costs -with a mortgage, 2018-2022',\n  'Median selected monthly owner costs -without a mortgage, 2018-2022',\n  'Median gross rent, 2018-2022',\n  // Add more categories as needed\n];\n\nconst percentageCategories = [\n  'Percentage of people under 5 years old',\n  'Percentage of people under 18 years old',\n  'Percentage of people 65 years and over',\n  'Percent women',\n  'Percent White alone',\n  'Percent Native Hawaiian and Other Pacific Islander alone',\n  'Population, percent change - 2020 to 2022',\n  'Percent Two or More Races',\n  'Percent Hispanic or Latino',\n  \n\n  // Add more categories as needed\n];\n\nfunction DataVisualization() {\n  // Initialize state here\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [categories, setCategories] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:5000/data')\n      .then((response) => response.json())\n      .then((data) => {\n        const parsedData = data.map((item) => {\n          let value = item.Value;\n          if (percentageCategories.includes(item.Category)) {\n            value = parseFloat(value.replace(/[^0-9.]/g, ''));\n          } else if (!monetaryCategories.includes(item.Category)) {\n            value = parseFloat(value.replace(/[$,]/g, ''));\n          }\n          return { ...item, Value: value };\n        });\n        setData(parsedData);\n\n        const categoryOptions = parsedData.reduce((acc, { Category }) => {\n          if (!acc.some((option) => option.value === Category)) {\n            acc.push({ value: Category, label: Category });\n          }\n          return acc;\n        }, []);\n        setCategories(categoryOptions);\n        if (categoryOptions.length > 0) {\n          setSelectedCategory(categoryOptions[0].value); // Default to first category\n        }\n      })\n      .catch((error) => console.error('Error:', error));\n  }, []);\n\n  const formatTooltipValue = (value, name, props) => {\n    const category = props.payload.Category;\n    if (monetaryCategories.includes(category)) {\n      return `$${Number(value).toLocaleString()}`;\n    } else if (percentageCategories.includes(category)) {\n      return `${value}%`;\n    }\n    return value.toLocaleString();\n  };\n\n  const filteredData = selectedCategory\n    ? data.filter((item) => item.Category === selectedCategory)\n    : [];\n\n  return (\n    <div>\n      <Select\n        options={categories}\n        onChange={(selectedOption) => setSelectedCategory(selectedOption.value)}\n        value={categories.find((option) => option.value === selectedCategory)}\n      />\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <LineChart\n          data={filteredData}\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"City\" />\n          <YAxis />\n          <Tooltip\n            formatter={(value, name, props) =>\n              formatTooltipValue(value, name, props)\n            }\n          />\n          <Legend />\n          <Line\n            type=\"monotone\"\n            dataKey=\"Value\"\n            stroke=\"#8884d8\"\n            strokeWidth={2}\n            dot={{ stroke: '#8884d8', strokeWidth: 2, fill: '#ffffff' }}\n            activeDot={{ r: 8, fill: '#8884d8' }}\n            animationDuration={3000}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default DataVisualization;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}