{"ast":null,"code":"var _jsxFileName = \"/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// Constants for monetary and percentage categories\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monetaryCategories = [\n  /* your categories */\n];\nconst percentageCategories = [\n  /* your categories */\n];\nfunction DataVisualization() {\n  _s();\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(null); // Changed to null for initial state\n  const [categories, setCategories] = useState([]);\n  const [chartData, setChartData] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:5000/data').then(response => response.json()).then(fetchedData => {\n      var _fetchedData$;\n      // Preparing categories for the Select component\n      const categoryOptions = Object.keys((_fetchedData$ = fetchedData[0]) !== null && _fetchedData$ !== void 0 ? _fetchedData$ : {}).filter(key => !['City', 'Lat', 'Lon'].includes(key)).map(category => ({\n        value: category,\n        label: category\n      }));\n      setCategories(categoryOptions);\n      setData(fetchedData);\n    }).catch(error => console.error('Error fetching data:', error));\n  }, []);\n  useEffect(() => {\n    // Logic to prepare data for charting based on the selected category\n  }, [selectedCategory, data]);\n  const formatTooltipValue = value => {\n    // Formatting logic for tooltip values\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      options: categories,\n      onChange: option => setSelectedCategory(option.value),\n      value: categories.find(option => option.value === selectedCategory),\n      placeholder: \"Select a value to compare\" // Adding the placeholder prop\n      ,\n      isClearable: true // Allows users to clear the selection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(DataVisualization, \"XjuRLeb1agzyV2UfR5gmH/o0p+k=\");\n_c = DataVisualization;\nexport default DataVisualization;\nvar _c;\n$RefreshReg$(_c, \"DataVisualization\");","map":{"version":3,"names":["React","useEffect","useState","Select","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","monetaryCategories","percentageCategories","DataVisualization","_s","data","setData","selectedCategory","setSelectedCategory","categories","setCategories","chartData","setChartData","fetch","then","response","json","fetchedData","_fetchedData$","categoryOptions","Object","keys","filter","key","includes","map","category","value","label","catch","error","console","formatTooltipValue","children","options","onChange","option","find","placeholder","isClearable","fileName","_jsxFileName","lineNumber","columnNumber","width","height","_c","$RefreshReg$"],"sources":["/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\n\n// Constants for monetary and percentage categories\nconst monetaryCategories = [\n  /* your categories */\n];\nconst percentageCategories = [\n  /* your categories */\n];\n\nfunction DataVisualization() {\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(null); // Changed to null for initial state\n  const [categories, setCategories] = useState([]);\n  const [chartData, setChartData] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:5000/data')\n      .then((response) => response.json())\n      .then((fetchedData) => {\n        // Preparing categories for the Select component\n        const categoryOptions = Object.keys(fetchedData[0] ?? {})\n          .filter((key) => !['City', 'Lat', 'Lon'].includes(key))\n          .map((category) => ({\n            value: category,\n            label: category,\n          }));\n\n        setCategories(categoryOptions);\n\n        setData(fetchedData);\n      })\n      .catch((error) => console.error('Error fetching data:', error));\n  }, []);\n\n  useEffect(() => {\n    // Logic to prepare data for charting based on the selected category\n  }, [selectedCategory, data]);\n\n  const formatTooltipValue = (value) => {\n    // Formatting logic for tooltip values\n  };\n\n  return (\n    <div>\n      <Select\n        options={categories}\n        onChange={(option) => setSelectedCategory(option.value)}\n        value={categories.find((option) => option.value === selectedCategory)}\n        placeholder=\"Select a value to compare\" // Adding the placeholder prop\n        isClearable={true} // Allows users to clear the selection\n      />\n      <ResponsiveContainer width=\"100%\" height={400}>\n        {/* Your charting component */}\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default DataVisualization;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,cAAc;AACjC,SACEC,SAAS,EACTC,IAAI,EACJC,KAAK,EACLC,KAAK,EACLC,aAAa,EACbC,OAAO,EACPC,MAAM,EACNC,mBAAmB,QACd,UAAU;;AAEjB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,kBAAkB,GAAG;EACzB;AAAA,CACD;AACD,MAAMC,oBAAoB,GAAG;EAC3B;AAAA,CACD;AAED,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAC3B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACkB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAChE,MAAM,CAACoB,UAAU,EAAEC,aAAa,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACsB,SAAS,EAAEC,YAAY,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACdyB,KAAK,CAAC,4BAA4B,CAAC,CAChCC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,WAAW,IAAK;MAAA,IAAAC,aAAA;MACrB;MACA,MAAMC,eAAe,GAAGC,MAAM,CAACC,IAAI,EAAAH,aAAA,GAACD,WAAW,CAAC,CAAC,CAAC,cAAAC,aAAA,cAAAA,aAAA,GAAI,CAAC,CAAC,CAAC,CACtDI,MAAM,CAAEC,GAAG,IAAK,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAACC,QAAQ,CAACD,GAAG,CAAC,CAAC,CACtDE,GAAG,CAAEC,QAAQ,KAAM;QAClBC,KAAK,EAAED,QAAQ;QACfE,KAAK,EAAEF;MACT,CAAC,CAAC,CAAC;MAELhB,aAAa,CAACS,eAAe,CAAC;MAE9Bb,OAAO,CAACW,WAAW,CAAC;IACtB,CAAC,CAAC,CACDY,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;EACnE,CAAC,EAAE,EAAE,CAAC;EAEN1C,SAAS,CAAC,MAAM;IACd;EAAA,CACD,EAAE,CAACmB,gBAAgB,EAAEF,IAAI,CAAC,CAAC;EAE5B,MAAM2B,kBAAkB,GAAIL,KAAK,IAAK;IACpC;EAAA,CACD;EAED,oBACE3B,OAAA;IAAAiC,QAAA,gBACEjC,OAAA,CAACV,MAAM;MACL4C,OAAO,EAAEzB,UAAW;MACpB0B,QAAQ,EAAGC,MAAM,IAAK5B,mBAAmB,CAAC4B,MAAM,CAACT,KAAK,CAAE;MACxDA,KAAK,EAAElB,UAAU,CAAC4B,IAAI,CAAED,MAAM,IAAKA,MAAM,CAACT,KAAK,KAAKpB,gBAAgB,CAAE;MACtE+B,WAAW,EAAC,2BAA2B,CAAC;MAAA;MACxCC,WAAW,EAAE,IAAK,CAAC;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC,eACF3C,OAAA,CAACF,mBAAmB;MAAC8C,KAAK,EAAC,MAAM;MAACC,MAAM,EAAE;IAAI;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEzB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnB,CAAC;AAEV;AAACvC,EAAA,CA/CQD,iBAAiB;AAAA2C,EAAA,GAAjB3C,iBAAiB;AAiD1B,eAAeA,iBAAiB;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}