{"ast":null,"code":"var _jsxFileName = \"/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DataVisualization() {\n  _s();\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:5000/data').then(response => response.json()).then(data => {\n      setData(data);\n      // Extract categories from data\n      const uniqueCategories = [...new Set(data.map(item => item.Category))];\n      setCategories(uniqueCategories.map(category => ({\n        value: category,\n        label: category\n      })));\n      setSelectedCategory(uniqueCategories[0]); // Set default category\n    }).catch(error => console.error('Error:', error));\n  }, []);\n\n  // Filter data based on the selected category\n  const filteredData = data.filter(item => item.Category === selectedCategory).map(item => ({\n    name: item.City,\n    value: item.Population\n  }));\n  const handleCategoryChange = selectedOption => {\n    setSelectedCategory(selectedOption.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      options: categories,\n      onChange: handleCategoryChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        width: 600,\n        height: 300,\n        data: filteredData,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"value\",\n          stroke: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(DataVisualization, \"Q0Lx6UFegBqZj+TGeKl6qnDJNEo=\");\n_c = DataVisualization;\nexport default DataVisualization;\nvar _c;\n$RefreshReg$(_c, \"DataVisualization\");","map":{"version":3,"names":["React","useEffect","useState","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Select","jsxDEV","_jsxDEV","DataVisualization","_s","data","setData","selectedCategory","setSelectedCategory","categories","setCategories","fetch","then","response","json","uniqueCategories","Set","map","item","Category","category","value","label","catch","error","console","filteredData","filter","name","City","Population","handleCategoryChange","selectedOption","children","options","onChange","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","_c","$RefreshReg$"],"sources":["/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataDisplay.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\nimport Select from 'react-select';\n\nfunction DataVisualization() {\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [categories, setCategories] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:5000/data')\n      .then((response) => response.json())\n      .then((data) => {\n        setData(data);\n        // Extract categories from data\n        const uniqueCategories = [\n          ...new Set(data.map((item) => item.Category)),\n        ];\n        setCategories(\n          uniqueCategories.map((category) => ({\n            value: category,\n            label: category,\n          }))\n        );\n        setSelectedCategory(uniqueCategories[0]); // Set default category\n      })\n      .catch((error) => console.error('Error:', error));\n  }, []);\n\n  // Filter data based on the selected category\n  const filteredData = data\n    .filter((item) => item.Category === selectedCategory)\n    .map((item) => ({\n      name: item.City,\n      value: item.Population,\n    }));\n\n  const handleCategoryChange = (selectedOption) => {\n    setSelectedCategory(selectedOption.value);\n  };\n\n  return (\n    <div>\n      <Select options={categories} onChange={handleCategoryChange} />\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <LineChart\n          width={600}\n          height={300}\n          data={filteredData}\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default DataVisualization;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}