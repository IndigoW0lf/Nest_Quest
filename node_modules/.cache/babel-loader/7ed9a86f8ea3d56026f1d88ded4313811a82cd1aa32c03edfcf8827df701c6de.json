{"ast":null,"code":"var _jsxFileName = \"/Users/indigowolf/workspace/where_to_live/frontend/src/components/MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, CircleMarker, Tooltip } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapComponent = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:5000/data') // Make sure this endpoint is correct\n    .then(response => response.json()).then(fetchedData => {\n      // Convert fetched data's Value from string to numeric where applicable\n      const numericData = fetchedData.map(item => ({\n        ...item,\n        Value: parseFloat(item.Value.replace(/[^0-9.-]+/g, '')),\n        // Assuming Value can be converted to float\n        Latitude: parseFloat(item.Latitude),\n        Longitude: parseFloat(item.Longitude)\n      }));\n      setData(numericData);\n      // Extract unique categories for Select component\n      const uniqueCategories = [...new Set(numericData.map(item => item.Category))].map(category => ({\n        value: category,\n        label: category\n      }));\n      setCategories(uniqueCategories);\n      if (uniqueCategories.length > 0) {\n        setSelectedCategory(uniqueCategories[0].value);\n      }\n    });\n  }, []);\n\n  // Filtered cities data based on the selected category\n  const filteredCities = data.filter(item => item.Category === selectedCategory);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      options: categories,\n      onChange: option => setSelectedCategory(option.value),\n      value: categories.find(option => option.value === selectedCategory)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [39.8283, -98.5795],\n      zoom: 4,\n      style: {\n        height: '400px',\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), filteredCities.map((city, index) => /*#__PURE__*/_jsxDEV(CircleMarker, {\n        center: [city.Latitude, city.Longitude] // Use Latitude and Longitude directly\n        ,\n        radius: Math.sqrt(city.Value) / 100 // Adjust radius based on the Value\n        ,\n        fillColor: \"#f28f3b\",\n        color: \"#000\",\n        weight: 1,\n        opacity: 0.5,\n        fillOpacity: 0.5,\n        children: /*#__PURE__*/_jsxDEV(Tooltip, {\n          children: `${city.City}: ${city.Value}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(MapComponent, \"Q0Lx6UFegBqZj+TGeKl6qnDJNEo=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","CircleMarker","Tooltip","Select","jsxDEV","_jsxDEV","MapComponent","_s","data","setData","selectedCategory","setSelectedCategory","categories","setCategories","fetch","then","response","json","fetchedData","numericData","map","item","Value","parseFloat","replace","Latitude","Longitude","uniqueCategories","Set","Category","category","value","label","length","filteredCities","filter","children","options","onChange","option","find","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","style","height","width","url","attribution","city","index","radius","Math","sqrt","fillColor","color","weight","opacity","fillOpacity","City","_c","$RefreshReg$"],"sources":["/Users/indigowolf/workspace/where_to_live/frontend/src/components/MapComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, CircleMarker, Tooltip } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport Select from 'react-select';\n\nconst MapComponent = () => {\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [categories, setCategories] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:5000/data') // Make sure this endpoint is correct\n      .then((response) => response.json())\n      .then((fetchedData) => {\n        // Convert fetched data's Value from string to numeric where applicable\n        const numericData = fetchedData.map((item) => ({\n          ...item,\n          Value: parseFloat(item.Value.replace(/[^0-9.-]+/g, '')), // Assuming Value can be converted to float\n          Latitude: parseFloat(item.Latitude),\n          Longitude: parseFloat(item.Longitude),\n        }));\n        setData(numericData);\n        // Extract unique categories for Select component\n        const uniqueCategories = [\n          ...new Set(numericData.map((item) => item.Category)),\n        ].map((category) => ({ value: category, label: category }));\n        setCategories(uniqueCategories);\n        if (uniqueCategories.length > 0) {\n          setSelectedCategory(uniqueCategories[0].value);\n        }\n      });\n  }, []);\n\n  // Filtered cities data based on the selected category\n  const filteredCities = data.filter(\n    (item) => item.Category === selectedCategory\n  );\n\n  return (\n    <div>\n      <Select\n        options={categories}\n        onChange={(option) => setSelectedCategory(option.value)}\n        value={categories.find((option) => option.value === selectedCategory)}\n      />\n      <MapContainer\n        center={[39.8283, -98.5795]}\n        zoom={4}\n        style={{ height: '400px', width: '100%' }}\n      >\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {filteredCities.map((city, index) => (\n          <CircleMarker\n            key={index}\n            center={[city.Latitude, city.Longitude]} // Use Latitude and Longitude directly\n            radius={Math.sqrt(city.Value) / 100} // Adjust radius based on the Value\n            fillColor=\"#f28f3b\"\n            color=\"#000\"\n            weight={1}\n            opacity={0.5}\n            fillOpacity={0.5}\n          >\n            <Tooltip>{`${city.City}: ${city.Value}`}</Tooltip>\n          </CircleMarker>\n        ))}\n      </MapContainer>\n    </div>\n  );\n};\n\nexport default MapComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}