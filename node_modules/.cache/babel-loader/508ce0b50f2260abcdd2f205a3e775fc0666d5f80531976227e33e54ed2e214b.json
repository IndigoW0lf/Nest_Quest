{"ast":null,"code":"var _jsxFileName = \"/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// Constants for monetary and percentage categories\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monetaryCategories = ['Median value of owner-occupied housing units', 'Median selected monthly owner costs with a mortgage', 'Median gross rent', 'Per capita income in past 12 months (2022)', 'Annual 10th percentile wage', 'Annual median wage', 'Annual 90th percentile wage'];\nconst percentageCategories = ['Population change from 2020 to 2022', 'People under 5 years old', 'People under 18 years old', 'People 65 years and over', 'Women population', 'White population alone', 'Native Hawaiian and Other Pacific Islander population alone', 'Population of Two or More Races', 'Hispanic or Latino population', \"Bachelor's degree or higher\", 'In civilian labor force, total population age 16+ years', 'In civilian labor force, female population age 16+ years', 'Persons in poverty'];\nfunction DataVisualization() {\n  _s();\n  // State for data, selected category, and category options\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:5000/data').then(response => response.json()).then(data => {\n      const parsedData = data.map(item => {\n        if (monetaryCategories.includes(item.Category)) {\n          // For monetary values, we keep the string as is to retain the dollar sign\n          return item; // Assume the item's value is already a string formatted with a dollar sign\n        } else if (percentageCategories.includes(item.Category)) {\n          // For percentages, parse and append '%' if necessary\n          let value = parseFloat(item.Value.replace(/[^0-9.]/g, ''));\n          return {\n            ...item,\n            Value: `${value}%`\n          };\n        } else {\n          // For other numeric values, parse as float\n          let value = parseFloat(item.Value.replace(/[^0-9.]/g, ''));\n          return {\n            ...item,\n            Value: value\n          };\n        }\n      });\n      setData(parsedData);\n\n      // Extract unique categories from the data\n      const uniqueCategories = Array.from(new Set(parsedData.map(item => item.Category))).map(category => {\n        return {\n          value: category,\n          label: category\n        };\n      });\n      setCategories(uniqueCategories);\n\n      // Optionally, set an initial selected category if desired\n      if (uniqueCategories.length > 0) {\n        setSelectedCategory(uniqueCategories[0].value);\n      }\n    }).catch(error => console.error('Error:', error));\n  }, []);\n\n  // Function to format tooltip values\n  const formatTooltipValue = (value, name, props) => {\n    const category = props.payload.Category;\n    if (monetaryCategories.includes(category)) {\n      // For monetary categories, we assume value is already formatted with a dollar sign\n      return value;\n    } else if (percentageCategories.includes(category)) {\n      return `${value}%`;\n    }\n    return value.toLocaleString();\n  };\n\n  // Filter data for the selected category\n  const filteredData = data.filter(d => d.Category === selectedCategory);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      options: categories,\n      onChange: option => setSelectedCategory(option.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: filteredData,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"City\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: formatTooltipValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Value\",\n          stroke: \"#8884d8\",\n          activeDot: {\n            r: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(DataVisualization, \"Q0Lx6UFegBqZj+TGeKl6qnDJNEo=\");\n_c = DataVisualization;\nexport default DataVisualization;\nvar _c;\n$RefreshReg$(_c, \"DataVisualization\");","map":{"version":3,"names":["React","useEffect","useState","Select","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","monetaryCategories","percentageCategories","DataVisualization","_s","data","setData","selectedCategory","setSelectedCategory","categories","setCategories","fetch","then","response","json","parsedData","map","item","includes","Category","value","parseFloat","Value","replace","uniqueCategories","Array","from","Set","category","label","length","catch","error","console","formatTooltipValue","name","props","payload","toLocaleString","filteredData","filter","d","children","options","onChange","option","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","formatter","type","stroke","activeDot","r","_c","$RefreshReg$"],"sources":["/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\n\n// Constants for monetary and percentage categories\nconst monetaryCategories = [\n  'Median value of owner-occupied housing units',\n  'Median selected monthly owner costs with a mortgage',\n  'Median gross rent',\n  'Per capita income in past 12 months (2022)',\n  'Annual 10th percentile wage',\n  'Annual median wage',\n  'Annual 90th percentile wage',\n];\n\nconst percentageCategories = [\n  'Population change from 2020 to 2022',\n  'People under 5 years old',\n  'People under 18 years old',\n  'People 65 years and over',\n  'Women population',\n  'White population alone',\n  'Native Hawaiian and Other Pacific Islander population alone',\n  'Population of Two or More Races',\n  'Hispanic or Latino population',\n  \"Bachelor's degree or higher\",\n  'In civilian labor force, total population age 16+ years',\n  'In civilian labor force, female population age 16+ years',\n  'Persons in poverty',\n];\n\nfunction DataVisualization() {\n  // State for data, selected category, and category options\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [categories, setCategories] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:5000/data')\n      .then((response) => response.json())\n      .then((data) => {\n        const parsedData = data.map((item) => {\n          if (monetaryCategories.includes(item.Category)) {\n            // For monetary values, we keep the string as is to retain the dollar sign\n            return item; // Assume the item's value is already a string formatted with a dollar sign\n          } else if (percentageCategories.includes(item.Category)) {\n            // For percentages, parse and append '%' if necessary\n            let value = parseFloat(item.Value.replace(/[^0-9.]/g, ''));\n            return { ...item, Value: `${value}%` };\n          } else {\n            // For other numeric values, parse as float\n            let value = parseFloat(item.Value.replace(/[^0-9.]/g, ''));\n            return { ...item, Value: value };\n          }\n        });\n        setData(parsedData);\n\n        // Extract unique categories from the data\n        const uniqueCategories = Array.from(\n          new Set(parsedData.map((item) => item.Category))\n        ).map((category) => {\n          return { value: category, label: category };\n        });\n        setCategories(uniqueCategories);\n\n        // Optionally, set an initial selected category if desired\n        if (uniqueCategories.length > 0) {\n          setSelectedCategory(uniqueCategories[0].value);\n        }\n      })\n      .catch((error) => console.error('Error:', error));\n  }, []);\n\n  // Function to format tooltip values\n  const formatTooltipValue = (value, name, props) => {\n    const category = props.payload.Category;\n    if (monetaryCategories.includes(category)) {\n      // For monetary categories, we assume value is already formatted with a dollar sign\n      return value;\n    } else if (percentageCategories.includes(category)) {\n      return `${value}%`;\n    }\n    return value.toLocaleString();\n  };\n\n  // Filter data for the selected category\n  const filteredData = data.filter((d) => d.Category === selectedCategory);\n\n  return (\n    <div>\n      <Select\n        options={categories}\n        onChange={(option) => setSelectedCategory(option.value)}\n      />\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <LineChart\n          data={filteredData}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"City\" />\n          <YAxis />\n          <Tooltip formatter={formatTooltipValue} />\n          <Legend />\n          <Line\n            type=\"monotone\"\n            dataKey=\"Value\"\n            stroke=\"#8884d8\"\n            activeDot={{ r: 8 }}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default DataVisualization;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}