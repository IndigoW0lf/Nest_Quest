{"ast":null,"code":"var _jsxFileName = \"/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// Assuming these categories are now column names in your dataset\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst categories = ['Population Estimates as of 2022'\n// List all other category column names here...\n];\nfunction DataVisualization() {\n  _s();\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(categories[0]); // Default to first category\n  const [chartData, setChartData] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:5000/data').then(response => response.json()).then(fetchedData => {\n      setData(fetchedData);\n      // No need for numericData conversion here since it will be handled in chartData preparation\n    }).catch(error => console.error('Error fetching data:', error));\n  }, []);\n  useEffect(() => {\n    // Prepare data for the selected category\n    const preparedData = data.map(item => ({\n      City: item.City,\n      Value: item[selectedCategory] // Dynamically access the selected category's value\n      // Add parsing logic here if your values are stored as strings in the dataset\n    }));\n    setChartData(preparedData);\n  }, [selectedCategory, data]);\n  const categoryOptions = categories.map(category => ({\n    value: category,\n    label: category\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      options: categoryOptions,\n      onChange: option => setSelectedCategory(option.value),\n      value: {\n        value: selectedCategory,\n        label: selectedCategory\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: chartData,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"City\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip\n        // Adjust this if needed to format values based on the category type\n        , {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Value\",\n          stroke: \"#8884d8\",\n          activeDot: {\n            r: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(DataVisualization, \"vu6dkfUM8nRCdtPXPTK3OC0jh0w=\");\n_c = DataVisualization;\nexport default DataVisualization;\nvar _c;\n$RefreshReg$(_c, \"DataVisualization\");","map":{"version":3,"names":["React","useEffect","useState","Select","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","categories","DataVisualization","_s","data","setData","selectedCategory","setSelectedCategory","chartData","setChartData","fetch","then","response","json","fetchedData","catch","error","console","preparedData","map","item","City","Value","categoryOptions","category","value","label","children","options","onChange","option","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","activeDot","r","_c","$RefreshReg$"],"sources":["/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\n\n// Assuming these categories are now column names in your dataset\nconst categories = [\n  'Population Estimates as of 2022',\n  // List all other category column names here...\n];\n\nfunction DataVisualization() {\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(categories[0]); // Default to first category\n  const [chartData, setChartData] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:5000/data')\n      .then((response) => response.json())\n      .then((fetchedData) => {\n        setData(fetchedData);\n        // No need for numericData conversion here since it will be handled in chartData preparation\n      })\n      .catch((error) => console.error('Error fetching data:', error));\n  }, []);\n\n  useEffect(() => {\n    // Prepare data for the selected category\n    const preparedData = data.map((item) => ({\n      City: item.City,\n      Value: item[selectedCategory], // Dynamically access the selected category's value\n      // Add parsing logic here if your values are stored as strings in the dataset\n    }));\n    setChartData(preparedData);\n  }, [selectedCategory, data]);\n\n  const categoryOptions = categories.map((category) => ({\n    value: category,\n    label: category,\n  }));\n\n  return (\n    <div>\n      <Select\n        options={categoryOptions}\n        onChange={(option) => setSelectedCategory(option.value)}\n        value={{ value: selectedCategory, label: selectedCategory }}\n      />\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"City\" />\n          <YAxis />\n          <Tooltip\n          // Adjust this if needed to format values based on the category type\n          />\n          <Legend />\n          <Line\n            type=\"monotone\"\n            dataKey=\"Value\"\n            stroke=\"#8884d8\"\n            activeDot={{ r: 8 }}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default DataVisualization;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}