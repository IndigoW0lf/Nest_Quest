{"ast":null,"code":"var _jsxFileName = \"/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// Define monetary and percentage categories\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monetaryCategories = ['Median household income (in 2022 dollars)', 'Median value of owner-occupied housing units, 2018-2022', 'Median selected monthly owner costs -with a mortgage, 2018-2022', 'Median selected monthly owner costs -without a mortgage, 2018-2022', 'Median gross rent, 2018-2022'];\nconst percentageCategories = ['Percentage of people under 5 years old', 'Percentage of people under 18 years old', 'Percentage of people 65 years and over', 'Percentage of women'\n// Add more categories as needed\n];\n\n// Helper function to format tooltip values\nconst formatTooltipValue = (value, name, props) => {\n  const category = props.payload.Category;\n  if (monetaryCategories.includes(category)) {\n    return `$${Number(value).toLocaleString()}`;\n  } else if (percentageCategories.includes(category)) {\n    return `${value}%`;\n  }\n  return value.toLocaleString();\n};\nfunction DataVisualization() {\n  _s();\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:5000/data').then(response => response.json()).then(data => {\n      const parsedData = data.map(item => {\n        let value = item.Value;\n        // Remove any formatting from the CSV data\n        value = value.replace(/[$,]/g, '');\n        if (!monetaryCategories.includes(item.Category) && !percentageCategories.includes(item.Category)) {\n          value = parseFloat(value);\n        }\n        return {\n          ...item,\n          Value: value\n        };\n      });\n      setData(parsedData);\n      const categoryOptions = Array.from(new Set(parsedData.map(item => item.Category))).map(category => ({\n        value: category,\n        label: category\n      }));\n      setCategories(categoryOptions);\n      if (categoryOptions.length > 0) {\n        setSelectedCategory(categoryOptions[0].value);\n      }\n    }).catch(error => console.error('Error:', error));\n  }, []);\n  const filteredData = selectedCategory ? data.filter(item => item.Category === selectedCategory) : [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      options: categories,\n      onChange: selectedOption => setSelectedCategory(selectedOption.value),\n      value: categories.find(option => option.value === selectedCategory)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: filteredData,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"City\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: (value, name, props) => formatTooltipValue(value, name, props)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Value\",\n          stroke: \"#8884d8\",\n          strokeWidth: 2,\n          dot: {\n            stroke: '#8884d8',\n            strokeWidth: 2,\n            fill: '#ffffff'\n          },\n          activeDot: {\n            r: 8,\n            fill: '#8884d8'\n          },\n          animationDuration: 3000\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(DataVisualization, \"THWERCFx8ZeVM+Aq1J8ZTxUoJIc=\");\n_c = DataVisualization;\nexport default DataVisualization;\nvar _c;\n$RefreshReg$(_c, \"DataVisualization\");","map":{"version":3,"names":["React","useEffect","useState","Select","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","monetaryCategories","percentageCategories","formatTooltipValue","value","name","props","category","payload","Category","includes","Number","toLocaleString","DataVisualization","_s","data","setData","selectedCategory","setSelectedCategory","categories","setCategories","fetch","then","response","json","parsedData","map","item","Value","replace","parseFloat","categoryOptions","Array","from","Set","label","length","catch","error","console","filteredData","filter","children","options","onChange","selectedOption","find","option","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","formatter","type","stroke","strokeWidth","dot","fill","activeDot","r","animationDuration","_c","$RefreshReg$"],"sources":["/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\n\n// Define monetary and percentage categories\nconst monetaryCategories = [\n  'Median household income (in 2022 dollars)',\n  'Median value of owner-occupied housing units, 2018-2022',\n  'Median selected monthly owner costs -with a mortgage, 2018-2022',\n  'Median selected monthly owner costs -without a mortgage, 2018-2022',\n  'Median gross rent, 2018-2022',\n];\n\nconst percentageCategories = [\n  'Percentage of people under 5 years old',\n  'Percentage of people under 18 years old',\n  'Percentage of people 65 years and over',\n  'Percentage of women',\n  // Add more categories as needed\n];\n\n// Helper function to format tooltip values\nconst formatTooltipValue = (value, name, props) => {\n  const category = props.payload.Category;\n  if (monetaryCategories.includes(category)) {\n    return `$${Number(value).toLocaleString()}`;\n  } else if (percentageCategories.includes(category)) {\n    return `${value}%`;\n  }\n  return value.toLocaleString();\n};\n\nfunction DataVisualization() {\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [categories, setCategories] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:5000/data')\n      .then((response) => response.json())\n      .then((data) => {\n        const parsedData = data.map((item) => {\n          let value = item.Value;\n          // Remove any formatting from the CSV data\n          value = value.replace(/[$,]/g, '');\n          if (\n            !monetaryCategories.includes(item.Category) &&\n            !percentageCategories.includes(item.Category)\n          ) {\n            value = parseFloat(value);\n          }\n          return { ...item, Value: value };\n        });\n        setData(parsedData);\n\n        const categoryOptions = Array.from(\n          new Set(parsedData.map((item) => item.Category))\n        ).map((category) => ({ value: category, label: category }));\n        setCategories(categoryOptions);\n        if (categoryOptions.length > 0) {\n          setSelectedCategory(categoryOptions[0].value);\n        }\n      })\n      .catch((error) => console.error('Error:', error));\n  }, []);\n\n  const filteredData = selectedCategory\n    ? data.filter((item) => item.Category === selectedCategory)\n    : [];\n\n  return (\n    <div>\n      <Select\n        options={categories}\n        onChange={(selectedOption) => setSelectedCategory(selectedOption.value)}\n        value={categories.find((option) => option.value === selectedCategory)}\n      />\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <LineChart\n          data={filteredData}\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"City\" />\n          <YAxis />\n          <Tooltip\n            formatter={(value, name, props) =>\n              formatTooltipValue(value, name, props)\n            }\n          />\n          <Legend />\n          <Line\n            type=\"monotone\"\n            dataKey=\"Value\"\n            stroke=\"#8884d8\"\n            strokeWidth={2}\n            dot={{ stroke: '#8884d8', strokeWidth: 2, fill: '#ffffff' }}\n            activeDot={{ r: 8, fill: '#8884d8' }}\n            animationDuration={3000}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default DataVisualization;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,cAAc;AACjC,SACEC,SAAS,EACTC,IAAI,EACJC,KAAK,EACLC,KAAK,EACLC,aAAa,EACbC,OAAO,EACPC,MAAM,EACNC,mBAAmB,QACd,UAAU;;AAEjB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,kBAAkB,GAAG,CACzB,2CAA2C,EAC3C,yDAAyD,EACzD,iEAAiE,EACjE,oEAAoE,EACpE,8BAA8B,CAC/B;AAED,MAAMC,oBAAoB,GAAG,CAC3B,wCAAwC,EACxC,yCAAyC,EACzC,wCAAwC,EACxC;AACA;AAAA,CACD;;AAED;AACA,MAAMC,kBAAkB,GAAGA,CAACC,KAAK,EAAEC,IAAI,EAAEC,KAAK,KAAK;EACjD,MAAMC,QAAQ,GAAGD,KAAK,CAACE,OAAO,CAACC,QAAQ;EACvC,IAAIR,kBAAkB,CAACS,QAAQ,CAACH,QAAQ,CAAC,EAAE;IACzC,OAAQ,IAAGI,MAAM,CAACP,KAAK,CAAC,CAACQ,cAAc,CAAC,CAAE,EAAC;EAC7C,CAAC,MAAM,IAAIV,oBAAoB,CAACQ,QAAQ,CAACH,QAAQ,CAAC,EAAE;IAClD,OAAQ,GAAEH,KAAM,GAAE;EACpB;EACA,OAAOA,KAAK,CAACQ,cAAc,CAAC,CAAC;AAC/B,CAAC;AAED,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAC3B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAAC4B,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAAC8B,UAAU,EAAEC,aAAa,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACdiC,KAAK,CAAC,4BAA4B,CAAC,CAChCC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEP,IAAI,IAAK;MACd,MAAMU,UAAU,GAAGV,IAAI,CAACW,GAAG,CAAEC,IAAI,IAAK;QACpC,IAAIvB,KAAK,GAAGuB,IAAI,CAACC,KAAK;QACtB;QACAxB,KAAK,GAAGA,KAAK,CAACyB,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;QAClC,IACE,CAAC5B,kBAAkB,CAACS,QAAQ,CAACiB,IAAI,CAAClB,QAAQ,CAAC,IAC3C,CAACP,oBAAoB,CAACQ,QAAQ,CAACiB,IAAI,CAAClB,QAAQ,CAAC,EAC7C;UACAL,KAAK,GAAG0B,UAAU,CAAC1B,KAAK,CAAC;QAC3B;QACA,OAAO;UAAE,GAAGuB,IAAI;UAAEC,KAAK,EAAExB;QAAM,CAAC;MAClC,CAAC,CAAC;MACFY,OAAO,CAACS,UAAU,CAAC;MAEnB,MAAMM,eAAe,GAAGC,KAAK,CAACC,IAAI,CAChC,IAAIC,GAAG,CAACT,UAAU,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAAClB,QAAQ,CAAC,CACjD,CAAC,CAACiB,GAAG,CAAEnB,QAAQ,KAAM;QAAEH,KAAK,EAAEG,QAAQ;QAAE4B,KAAK,EAAE5B;MAAS,CAAC,CAAC,CAAC;MAC3Da,aAAa,CAACW,eAAe,CAAC;MAC9B,IAAIA,eAAe,CAACK,MAAM,GAAG,CAAC,EAAE;QAC9BlB,mBAAmB,CAACa,eAAe,CAAC,CAAC,CAAC,CAAC3B,KAAK,CAAC;MAC/C;IACF,CAAC,CAAC,CACDiC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC,CAAC;EACrD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,YAAY,GAAGvB,gBAAgB,GACjCF,IAAI,CAAC0B,MAAM,CAAEd,IAAI,IAAKA,IAAI,CAAClB,QAAQ,KAAKQ,gBAAgB,CAAC,GACzD,EAAE;EAEN,oBACEjB,OAAA;IAAA0C,QAAA,gBACE1C,OAAA,CAACV,MAAM;MACLqD,OAAO,EAAExB,UAAW;MACpByB,QAAQ,EAAGC,cAAc,IAAK3B,mBAAmB,CAAC2B,cAAc,CAACzC,KAAK,CAAE;MACxEA,KAAK,EAAEe,UAAU,CAAC2B,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAAC3C,KAAK,KAAKa,gBAAgB;IAAE;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvE,CAAC,eACFnD,OAAA,CAACF,mBAAmB;MAACsD,KAAK,EAAC,MAAM;MAACC,MAAM,EAAE,GAAI;MAAAX,QAAA,eAC5C1C,OAAA,CAACT,SAAS;QACRwB,IAAI,EAAEyB,YAAa;QACnBc,MAAM,EAAE;UAAEC,GAAG,EAAE,CAAC;UAAEC,KAAK,EAAE,EAAE;UAAEC,IAAI,EAAE,EAAE;UAAEC,MAAM,EAAE;QAAE,CAAE;QAAAhB,QAAA,gBAEnD1C,OAAA,CAACL,aAAa;UAACgE,eAAe,EAAC;QAAK;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACvCnD,OAAA,CAACP,KAAK;UAACmE,OAAO,EAAC;QAAM;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACxBnD,OAAA,CAACN,KAAK;UAAAsD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACTnD,OAAA,CAACJ,OAAO;UACNiE,SAAS,EAAEA,CAACzD,KAAK,EAAEC,IAAI,EAAEC,KAAK,KAC5BH,kBAAkB,CAACC,KAAK,EAAEC,IAAI,EAAEC,KAAK;QACtC;UAAA0C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC,eACFnD,OAAA,CAACH,MAAM;UAAAmD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACVnD,OAAA,CAACR,IAAI;UACHsE,IAAI,EAAC,UAAU;UACfF,OAAO,EAAC,OAAO;UACfG,MAAM,EAAC,SAAS;UAChBC,WAAW,EAAE,CAAE;UACfC,GAAG,EAAE;YAAEF,MAAM,EAAE,SAAS;YAAEC,WAAW,EAAE,CAAC;YAAEE,IAAI,EAAE;UAAU,CAAE;UAC5DC,SAAS,EAAE;YAAEC,CAAC,EAAE,CAAC;YAAEF,IAAI,EAAE;UAAU,CAAE;UACrCG,iBAAiB,EAAE;QAAK;UAAArB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACO;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnB,CAAC;AAEV;AAACrC,EAAA,CAxEQD,iBAAiB;AAAAyD,EAAA,GAAjBzD,iBAAiB;AA0E1B,eAAeA,iBAAiB;AAAC,IAAAyD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}