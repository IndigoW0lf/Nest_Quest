{"ast":null,"code":"var _jsxFileName = \"/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// Constants for monetary and percentage categories\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monetaryCategories = ['Median value of owner-occupied housing units', 'Median selected monthly owner costs with a mortgage', 'Median gross rent', 'Per capita income in past 12 months (2022)', 'Annual 10th percentile wage', 'Annual median wage', 'Annual 90th percentile wage'];\nconst percentageCategories = ['Population change from 2020 to 2022', 'People under 5 years old', 'People under 18 years old', 'People 65 years and over', 'Women population', 'White population alone', 'Native Hawaiian and Other Pacific Islander population alone', 'Population of Two or More Races', 'Hispanic or Latino population', \"Bachelor's degree or higher\", 'In civilian labor force, total population age 16+ years', 'In civilian labor force, female population age 16+ years', 'Persons in poverty'];\nfunction DataVisualization() {\n  _s();\n  // State for data, selected category, and category options\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:5000/data').then(response => response.json()).then(data => {\n      const parsedData = data.map(item => {\n        let value = item.Value;\n        // Assuming all percentage and monetary values are handled,\n        // we need to ensure all other values are also parsed as floats.\n        if (!percentageCategories.includes(item.Category) && !monetaryCategories.includes(item.Category)) {\n          // Parse other numerical values as floats\n          value = parseFloat(value.replace(/[^0-9.]/g, ''));\n        } else if (percentageCategories.includes(item.Category)) {\n          value = parseFloat(value.replace(/[^0-9.]/g, ''));\n        } else if (monetaryCategories.includes(item.Category)) {\n          value = parseFloat(value.replace(/[$,]/g, ''));\n        }\n        return {\n          ...item,\n          Value: value\n        };\n      });\n      setData(parsedData);\n\n      // The rest of the code remains unchanged\n    }).catch(error => console.error('Error:', error));\n  }, []);\n\n  // Function to format tooltip values\n  const formatTooltipValue = (value, name, props) => {\n    const category = props.payload.Category;\n    if (monetaryCategories.includes(category)) {\n      return `$${Number(value).toLocaleString()}`;\n    } else if (percentageCategories.includes(category)) {\n      return `${value}%`;\n    }\n    return value.toLocaleString();\n  };\n\n  // Filter data for the selected category\n  const filteredData = data.filter(item => item.Category === selectedCategory);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      options: categories,\n      onChange: selectedOption => setSelectedCategory(selectedOption.value),\n      value: categories.find(option => option.value === selectedCategory)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: filteredData,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"City\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: formatTooltipValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Value\",\n          stroke: \"#8884d8\",\n          strokeWidth: 2,\n          dot: {\n            stroke: '#8884d8',\n            strokeWidth: 2,\n            fill: '#ffffff'\n          },\n          activeDot: {\n            r: 8,\n            fill: '#8884d8'\n          },\n          animationDuration: 3000\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_s(DataVisualization, \"Q0Lx6UFegBqZj+TGeKl6qnDJNEo=\");\n_c = DataVisualization;\nexport default DataVisualization;\nvar _c;\n$RefreshReg$(_c, \"DataVisualization\");","map":{"version":3,"names":["React","useEffect","useState","Select","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","monetaryCategories","percentageCategories","DataVisualization","_s","data","setData","selectedCategory","setSelectedCategory","categories","setCategories","fetch","then","response","json","parsedData","map","item","value","Value","includes","Category","parseFloat","replace","catch","error","console","formatTooltipValue","name","props","category","payload","Number","toLocaleString","filteredData","filter","children","options","onChange","selectedOption","find","option","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","formatter","type","stroke","strokeWidth","dot","fill","activeDot","r","animationDuration","_c","$RefreshReg$"],"sources":["/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\n\n// Constants for monetary and percentage categories\nconst monetaryCategories = [\n  'Median value of owner-occupied housing units',\n  'Median selected monthly owner costs with a mortgage',\n  'Median gross rent',\n  'Per capita income in past 12 months (2022)',\n  'Annual 10th percentile wage',\n  'Annual median wage',\n  'Annual 90th percentile wage',\n];\n\nconst percentageCategories = [\n  'Population change from 2020 to 2022',\n  'People under 5 years old',\n  'People under 18 years old',\n  'People 65 years and over',\n  'Women population',\n  'White population alone',\n  'Native Hawaiian and Other Pacific Islander population alone',\n  'Population of Two or More Races',\n  'Hispanic or Latino population',\n  \"Bachelor's degree or higher\",\n  'In civilian labor force, total population age 16+ years',\n  'In civilian labor force, female population age 16+ years',\n  'Persons in poverty',\n];\n\nfunction DataVisualization() {\n  // State for data, selected category, and category options\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [categories, setCategories] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:5000/data')\n      .then((response) => response.json())\n      .then((data) => {\n        const parsedData = data.map((item) => {\n          let value = item.Value;\n          // Assuming all percentage and monetary values are handled,\n          // we need to ensure all other values are also parsed as floats.\n          if (\n            !percentageCategories.includes(item.Category) &&\n            !monetaryCategories.includes(item.Category)\n          ) {\n            // Parse other numerical values as floats\n            value = parseFloat(value.replace(/[^0-9.]/g, ''));\n          } else if (percentageCategories.includes(item.Category)) {\n            value = parseFloat(value.replace(/[^0-9.]/g, ''));\n          } else if (monetaryCategories.includes(item.Category)) {\n            value = parseFloat(value.replace(/[$,]/g, ''));\n          }\n          return { ...item, Value: value };\n        });\n        setData(parsedData);\n\n        // The rest of the code remains unchanged\n      })\n      .catch((error) => console.error('Error:', error));\n  }, []);\n\n\n  // Function to format tooltip values\n  const formatTooltipValue = (value, name, props) => {\n    const category = props.payload.Category;\n    if (monetaryCategories.includes(category)) {\n      return `$${Number(value).toLocaleString()}`;\n    } else if (percentageCategories.includes(category)) {\n      return `${value}%`;\n    }\n    return value.toLocaleString();\n  };\n\n  // Filter data for the selected category\n  const filteredData = data.filter(\n    (item) => item.Category === selectedCategory\n  );\n\n  return (\n    <div>\n      <Select\n        options={categories}\n        onChange={(selectedOption) => setSelectedCategory(selectedOption.value)}\n        value={categories.find((option) => option.value === selectedCategory)}\n      />\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <LineChart\n          data={filteredData}\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"City\" />\n          <YAxis />\n          <Tooltip formatter={formatTooltipValue} />\n          <Legend />\n          <Line\n            type=\"monotone\"\n            dataKey=\"Value\"\n            stroke=\"#8884d8\"\n            strokeWidth={2}\n            dot={{ stroke: '#8884d8', strokeWidth: 2, fill: '#ffffff' }}\n            activeDot={{ r: 8, fill: '#8884d8' }}\n            animationDuration={3000}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default DataVisualization;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}