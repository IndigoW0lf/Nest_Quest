{"ast":null,"code":"var _jsxFileName = \"/Users/indigowolf/workspace/where_to_live/frontend/src/components/MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, CircleMarker, Tooltip } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapComponent = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:5000/data').then(response => response.json()).then(fetchedData => {\n      // Since Value parsing may not be needed for latitude and longitude, adjust if necessary for other data points\n      setData(fetchedData);\n      // Assuming categories are now based on data points like \"Population Estimates as of 2022\"\n      const extractedCategories = Object.keys(fetchedData[0]).filter(key => key !== 'City' && key !== 'Lat' && key !== 'Lon');\n      setCategories(extractedCategories.map(category => ({\n        value: category,\n        label: category\n      })));\n      if (extractedCategories.length > 0) {\n        setSelectedCategory(extractedCategories[0]);\n      }\n    });\n  }, []);\n\n  // Map visualization doesn't typically filter cities by category but might visualize different aspects based on the selected category\n  // Adjust radius calculation or color based on the category value if needed\n  const visualizeCategoryValue = city => {\n    if (selectedCategory && !isNaN(city[selectedCategory])) {\n      return Math.sqrt(parseFloat(city[selectedCategory])) / 100; // Example scaling, adjust as needed\n    }\n    return 5; // Default radius\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      options: categories.map(category => ({\n        value: category.value,\n        label: category.label\n      })),\n      onChange: option => setSelectedCategory(option.value),\n      value: {\n        value: selectedCategory,\n        label: selectedCategory\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [39.8283, -98.5795],\n      zoom: 4,\n      style: {\n        height: '400px',\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), data.map((city, index) => /*#__PURE__*/_jsxDEV(CircleMarker, {\n        center: [city.Lat, city.Lon],\n        radius: visualizeCategoryValue(city) // Adjust this function based on how you want to visualize the selected category\n        ,\n        fillColor: \"#f28f3b\",\n        color: \"#000\",\n        weight: 1,\n        opacity: 0.5,\n        fillOpacity: 0.5,\n        children: /*#__PURE__*/_jsxDEV(Tooltip, {\n          children: `${city.City}: ${city[selectedCategory]}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(MapComponent, \"Q0Lx6UFegBqZj+TGeKl6qnDJNEo=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","CircleMarker","Tooltip","Select","jsxDEV","_jsxDEV","MapComponent","_s","data","setData","selectedCategory","setSelectedCategory","categories","setCategories","fetch","then","response","json","fetchedData","extractedCategories","Object","keys","filter","key","map","category","value","label","length","visualizeCategoryValue","city","isNaN","Math","sqrt","parseFloat","children","options","onChange","option","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","style","height","width","url","attribution","index","Lat","Lon","radius","fillColor","color","weight","opacity","fillOpacity","City","_c","$RefreshReg$"],"sources":["/Users/indigowolf/workspace/where_to_live/frontend/src/components/MapComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, CircleMarker, Tooltip } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport Select from 'react-select';\n\nconst MapComponent = () => {\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [categories, setCategories] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:5000/data')\n      .then((response) => response.json())\n      .then((fetchedData) => {\n        // Since Value parsing may not be needed for latitude and longitude, adjust if necessary for other data points\n        setData(fetchedData);\n        // Assuming categories are now based on data points like \"Population Estimates as of 2022\"\n        const extractedCategories = Object.keys(fetchedData[0]).filter(\n          (key) => key !== 'City' && key !== 'Lat' && key !== 'Lon'\n        );\n        setCategories(\n          extractedCategories.map((category) => ({\n            value: category,\n            label: category,\n          }))\n        );\n        if (extractedCategories.length > 0) {\n          setSelectedCategory(extractedCategories[0]);\n        }\n      });\n  }, []);\n\n  // Map visualization doesn't typically filter cities by category but might visualize different aspects based on the selected category\n  // Adjust radius calculation or color based on the category value if needed\n  const visualizeCategoryValue = (city) => {\n    if (selectedCategory && !isNaN(city[selectedCategory])) {\n      return Math.sqrt(parseFloat(city[selectedCategory])) / 100; // Example scaling, adjust as needed\n    }\n    return 5; // Default radius\n  };\n\n  return (\n    <div>\n      <Select\n        options={categories.map((category) => ({\n          value: category.value,\n          label: category.label,\n        }))}\n        onChange={(option) => setSelectedCategory(option.value)}\n        value={{ value: selectedCategory, label: selectedCategory }}\n      />\n      <MapContainer\n        center={[39.8283, -98.5795]}\n        zoom={4}\n        style={{ height: '400px', width: '100%' }}\n      >\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {data.map((city, index) => (\n          <CircleMarker\n            key={index}\n            center={[city.Lat, city.Lon]}\n            radius={visualizeCategoryValue(city)} // Adjust this function based on how you want to visualize the selected category\n            fillColor=\"#f28f3b\"\n            color=\"#000\"\n            weight={1}\n            opacity={0.5}\n            fillOpacity={0.5}\n          >\n            <Tooltip>{`${city.City}: ${city[selectedCategory]}`}</Tooltip>\n          </CircleMarker>\n        ))}\n      </MapContainer>\n    </div>\n  );\n};\n\nexport default MapComponent;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}