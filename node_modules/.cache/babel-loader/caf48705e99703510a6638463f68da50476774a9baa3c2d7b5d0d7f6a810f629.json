{"ast":null,"code":"var _jsxFileName = \"/Users/indigowolf/workspace/where_to_live/frontend/src/components/MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, CircleMarker, Tooltip } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapComponent = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [cities, setCities] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:5000/data').then(response => response.json()).then(data => {\n      setData(data);\n      const uniqueCategories = [...new Set(data.map(item => item.Category))].map(category => ({\n        value: category,\n        label: category\n      }));\n      setCategories(uniqueCategories);\n      if (uniqueCategories.length) setSelectedCategory(uniqueCategories[0].value);\n    });\n  }, []);\n  useEffect(() => {\n    // Filter cities based on the selected category\n    const filteredData = data.filter(item => item.Category === selectedCategory).map(city => ({\n      ...city,\n      lat: city.Latitude,\n      lon: city.Longitude,\n      Value: parseFloat(city.Value.replace(/[^0-9.-]+/g, '')) // Assuming population or other numeric data might be formatted as strings\n    }));\n    setCities(filteredData);\n  }, [selectedCategory, data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      options: categories,\n      onChange: option => setSelectedCategory(option.value),\n      value: categories.find(option => option.value === selectedCategory)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [39.8283, -98.5795],\n      zoom: 4,\n      style: {\n        height: '400px',\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), cities.map((city, index) => /*#__PURE__*/_jsxDEV(CircleMarker, {\n        center: [city.lat, city.lon],\n        radius: Math.sqrt(city.Value) / 100 // This assumes Value is a population or similar metric\n        ,\n        fillColor: \"#f28f3b\",\n        color: \"#000\",\n        weight: 1,\n        opacity: 0.5,\n        fillOpacity: 0.5,\n        children: /*#__PURE__*/_jsxDEV(Tooltip, {\n          children: `${city.City}: ${city.Value}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(MapComponent, \"msamiMqCmz2awue7W73loOGumzk=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","CircleMarker","Tooltip","Select","jsxDEV","_jsxDEV","MapComponent","_s","data","setData","cities","setCities","selectedCategory","setSelectedCategory","categories","setCategories","fetch","then","response","json","uniqueCategories","Set","map","item","Category","category","value","label","length","filteredData","filter","city","lat","Latitude","lon","Longitude","Value","parseFloat","replace","children","options","onChange","option","find","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","style","height","width","url","attribution","index","radius","Math","sqrt","fillColor","color","weight","opacity","fillOpacity","City","_c","$RefreshReg$"],"sources":["/Users/indigowolf/workspace/where_to_live/frontend/src/components/MapComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, CircleMarker, Tooltip } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport Select from 'react-select';\n\nconst MapComponent = () => {\n  const [data, setData] = useState([]);\n  const [cities, setCities] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [categories, setCategories] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:5000/data')\n      .then((response) => response.json())\n      .then((data) => {\n        setData(data);\n        const uniqueCategories = [\n          ...new Set(data.map((item) => item.Category)),\n        ].map((category) => ({ value: category, label: category }));\n        setCategories(uniqueCategories);\n        if (uniqueCategories.length)\n          setSelectedCategory(uniqueCategories[0].value);\n      });\n  }, []);\n\n  useEffect(() => {\n    // Filter cities based on the selected category\n    const filteredData = data\n      .filter((item) => item.Category === selectedCategory)\n      .map((city) => ({\n        ...city,\n        lat: city.Latitude,\n        lon: city.Longitude,\n        Value: parseFloat(city.Value.replace(/[^0-9.-]+/g, '')), // Assuming population or other numeric data might be formatted as strings\n      }));\n    setCities(filteredData);\n  }, [selectedCategory, data]);\n\n  return (\n    <div>\n      <Select\n        options={categories}\n        onChange={(option) => setSelectedCategory(option.value)}\n        value={categories.find((option) => option.value === selectedCategory)}\n      />\n      <MapContainer\n        center={[39.8283, -98.5795]}\n        zoom={4}\n        style={{ height: '400px', width: '100%' }}\n      >\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {cities.map((city, index) => (\n          <CircleMarker\n            key={index}\n            center={[city.lat, city.lon]}\n            radius={Math.sqrt(city.Value) / 100} // This assumes Value is a population or similar metric\n            fillColor=\"#f28f3b\"\n            color=\"#000\"\n            weight={1}\n            opacity={0.5}\n            fillOpacity={0.5}\n          >\n            <Tooltip>{`${city.City}: ${city.Value}`}</Tooltip>\n          </CircleMarker>\n        ))}\n      </MapContainer>\n    </div>\n  );\n};\n\nexport default MapComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}