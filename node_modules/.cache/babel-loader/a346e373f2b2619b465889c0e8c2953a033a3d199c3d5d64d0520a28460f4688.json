{"ast":null,"code":"var _jsxFileName = \"/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// Constants for monetary and percentage categories\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monetaryCategories = ['Median value of owner-occupied housing units', 'Median selected monthly owner costs with a mortgage', 'Median gross rent', 'Per capita income in past 12 months (2022)', 'Annual 10th percentile wage', 'Annual median wage', 'Annual 90th percentile wage'];\nconst percentageCategories = ['Population change from 2020 to 2022', 'People under 5 years old', 'People under 18 years old', 'People 65 years and over', 'Women population', 'White population alone', 'Native Hawaiian and Other Pacific Islander population alone', 'Population of Two or More Races', 'Hispanic or Latino population', \"Bachelor's degree or higher\", 'In civilian labor force, total population age 16+ years', 'In civilian labor force, female population age 16+ years', 'Persons in poverty'];\nfunction DataVisualization() {\n  _s();\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  // Define categories and its setter here\n  const [categories, setCategories] = useState([]); // Corrected: Defined state for categories\n  const [chartData, setChartData] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:5000/data').then(response => response.json()).then(fetchedData => {\n      var _fetchedData$;\n      const categoryOptions = Object.keys((_fetchedData$ = fetchedData[0]) !== null && _fetchedData$ !== void 0 ? _fetchedData$ : {}).filter(key => !['City', 'Lat', 'Lon'].includes(key));\n      setCategories(categoryOptions); // Corrected: Properly setting the categories state\n      if (categoryOptions.length > 0) {\n        setSelectedCategory(categoryOptions[0]);\n      }\n      setData(fetchedData);\n    }).catch(error => console.error('Error fetching data:', error));\n  }, []);\n  useEffect(() => {\n    const preparedData = data.map(city => {\n      var _city$selectedCategor, _city$selectedCategor2;\n      return {\n        City: city.City,\n        Value: monetaryCategories.includes(selectedCategory) ? parseFloat(((_city$selectedCategor = city[selectedCategory]) === null || _city$selectedCategor === void 0 ? void 0 : _city$selectedCategor.replace(/[$,]/g, '')) || 0) : percentageCategories.includes(selectedCategory) ? parseFloat(((_city$selectedCategor2 = city[selectedCategory]) === null || _city$selectedCategor2 === void 0 ? void 0 : _city$selectedCategor2.replace('%', '')) || 0) : city[selectedCategory]\n      };\n    }).filter(city => !isNaN(city.Value)); // Ensure only numeric values are plotted\n\n    setChartData(preparedData);\n  }, [selectedCategory, data]);\n  const formatTooltipValue = value => {\n    if (monetaryCategories.includes(selectedCategory)) {\n      return `$${value.toLocaleString()}`;\n    } else if (percentageCategories.includes(selectedCategory)) {\n      return `${value}%`;\n    }\n    return value.toString();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      options: categories.map(category => ({\n        value: category,\n        label: category\n      })),\n      onChange: option => setSelectedCategory(option.value),\n      value: categories.find(option => option.value === selectedCategory) || ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: chartData,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"City\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: value => formatTooltipValue(value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Value\",\n          name: selectedCategory,\n          stroke: \"#8884d8\",\n          activeDot: {\n            r: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(DataVisualization, \"Ns29I+rZJpi+Jjj+sWEGg+cnyaE=\");\n_c = DataVisualization;\nexport default DataVisualization;\nvar _c;\n$RefreshReg$(_c, \"DataVisualization\");","map":{"version":3,"names":["React","useEffect","useState","Select","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","monetaryCategories","percentageCategories","DataVisualization","_s","data","setData","selectedCategory","setSelectedCategory","categories","setCategories","chartData","setChartData","fetch","then","response","json","fetchedData","_fetchedData$","categoryOptions","Object","keys","filter","key","includes","length","catch","error","console","preparedData","map","city","_city$selectedCategor","_city$selectedCategor2","City","Value","parseFloat","replace","isNaN","formatTooltipValue","value","toLocaleString","toString","children","options","category","label","onChange","option","find","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","formatter","type","name","stroke","activeDot","r","_c","$RefreshReg$"],"sources":["/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\n\n// Constants for monetary and percentage categories\nconst monetaryCategories = [\n  'Median value of owner-occupied housing units',\n  'Median selected monthly owner costs with a mortgage',\n  'Median gross rent',\n  'Per capita income in past 12 months (2022)',\n  'Annual 10th percentile wage',\n  'Annual median wage',\n  'Annual 90th percentile wage',\n];\n\nconst percentageCategories = [\n  'Population change from 2020 to 2022',\n  'People under 5 years old',\n  'People under 18 years old',\n  'People 65 years and over',\n  'Women population',\n  'White population alone',\n  'Native Hawaiian and Other Pacific Islander population alone',\n  'Population of Two or More Races',\n  'Hispanic or Latino population',\n  \"Bachelor's degree or higher\",\n  'In civilian labor force, total population age 16+ years',\n  'In civilian labor force, female population age 16+ years',\n  'Persons in poverty',\n];\n\nfunction DataVisualization() {\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  // Define categories and its setter here\n  const [categories, setCategories] = useState([]); // Corrected: Defined state for categories\n  const [chartData, setChartData] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:5000/data')\n      .then((response) => response.json())\n      .then((fetchedData) => {\n        const categoryOptions = Object.keys(fetchedData[0] ?? {}).filter(\n          (key) => !['City', 'Lat', 'Lon'].includes(key)\n        );\n        setCategories(categoryOptions); // Corrected: Properly setting the categories state\n        if (categoryOptions.length > 0) {\n          setSelectedCategory(categoryOptions[0]);\n        }\n        setData(fetchedData);\n      })\n      .catch((error) => console.error('Error fetching data:', error));\n  }, []);\n\n  useEffect(() => {\n    const preparedData = data\n      .map((city) => ({\n        City: city.City,\n        Value: monetaryCategories.includes(selectedCategory)\n          ? parseFloat(city[selectedCategory]?.replace(/[$,]/g, '') || 0)\n          : percentageCategories.includes(selectedCategory)\n          ? parseFloat(city[selectedCategory]?.replace('%', '') || 0)\n          : city[selectedCategory],\n      }))\n      .filter((city) => !isNaN(city.Value)); // Ensure only numeric values are plotted\n\n    setChartData(preparedData);\n  }, [selectedCategory, data]);\n\n  const formatTooltipValue = (value) => {\n    if (monetaryCategories.includes(selectedCategory)) {\n      return `$${value.toLocaleString()}`;\n    } else if (percentageCategories.includes(selectedCategory)) {\n      return `${value}%`;\n    }\n    return value.toString();\n  };\n\n  return (\n    <div>\n      <Select\n        options={categories.map((category) => ({\n          value: category,\n          label: category,\n        }))}\n        onChange={(option) => setSelectedCategory(option.value)}\n        value={\n          categories.find((option) => option.value === selectedCategory) || ''\n        }\n      />\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"City\" />\n          <YAxis />\n          <Tooltip formatter={(value) => formatTooltipValue(value)} />\n          <Legend />\n          <Line\n            type=\"monotone\"\n            dataKey=\"Value\"\n            name={selectedCategory}\n            stroke=\"#8884d8\"\n            activeDot={{ r: 8 }}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default DataVisualization;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}