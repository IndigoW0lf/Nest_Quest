{"ast":null,"code":"var _jsxFileName = \"/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DataVisualization() {\n  _s();\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:5000/data').then(response => response.json()).then(data => {\n      // Convert string values to numbers, specifically handling values with commas and dollar signs\n      const numericData = data.map(item => ({\n        ...item,\n        Value: item.Value.includes('$') ? parseFloat(item.Value.replace(/[$,]/g, '')) : item.Value // Remove $ and commas for currency values before converting\n      }));\n      setData(numericData);\n\n      // Extract unique categories\n      const uniqueCategories = Array.from(new Set(numericData.map(item => item.Category))).map(category => ({\n        value: category,\n        label: category\n      }));\n      setCategories(uniqueCategories);\n      if (uniqueCategories.length > 0) {\n        setSelectedCategory(uniqueCategories[0]); // Default to first category\n      }\n    }).catch(error => console.error('Error:', error));\n  }, []);\n\n  // Filter data based on selected category\n  const filteredData = selectedCategory ? data.filter(item => item.Category === selectedCategory.value) : [];\n\n  // Custom formatter function for the tooltip\n  const customFormatter = (value, name, props) => {\n    // Check if the category should be formatted as currency\n    if (props.payload.Category.includes('Median')) {\n      return `$${value.toLocaleString()}`;\n    }\n    return value;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      options: categories,\n      onChange: setSelectedCategory,\n      value: selectedCategory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: filteredData,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"City\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: customFormatter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Value\",\n          stroke: \"#8884d8\",\n          activeDot: {\n            r: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(DataVisualization, \"THWERCFx8ZeVM+Aq1J8ZTxUoJIc=\");\n_c = DataVisualization;\nexport default DataVisualization;\nvar _c;\n$RefreshReg$(_c, \"DataVisualization\");","map":{"version":3,"names":["React","useEffect","useState","Select","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","DataVisualization","_s","data","setData","selectedCategory","setSelectedCategory","categories","setCategories","fetch","then","response","json","numericData","map","item","Value","includes","parseFloat","replace","uniqueCategories","Array","from","Set","Category","category","value","label","length","catch","error","console","filteredData","filter","customFormatter","name","props","payload","toLocaleString","children","options","onChange","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","formatter","type","stroke","activeDot","r","_c","$RefreshReg$"],"sources":["/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\n\nfunction DataVisualization() {\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [categories, setCategories] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:5000/data')\n      .then((response) => response.json())\n      .then((data) => {\n        // Convert string values to numbers, specifically handling values with commas and dollar signs\n        const numericData = data.map((item) => ({\n          ...item,\n          Value: item.Value.includes('$')\n            ? parseFloat(item.Value.replace(/[$,]/g, ''))\n            : item.Value, // Remove $ and commas for currency values before converting\n        }));\n        setData(numericData);\n\n        // Extract unique categories\n        const uniqueCategories = Array.from(\n          new Set(numericData.map((item) => item.Category))\n        ).map((category) => ({ value: category, label: category }));\n        setCategories(uniqueCategories);\n        if (uniqueCategories.length > 0) {\n          setSelectedCategory(uniqueCategories[0]); // Default to first category\n        }\n      })\n      .catch((error) => console.error('Error:', error));\n  }, []);\n\n  // Filter data based on selected category\n  const filteredData = selectedCategory\n    ? data.filter((item) => item.Category === selectedCategory.value)\n    : [];\n\n  // Custom formatter function for the tooltip\n  const customFormatter = (value, name, props) => {\n    // Check if the category should be formatted as currency\n    if (props.payload.Category.includes('Median')) {\n      return `$${value.toLocaleString()}`;\n    }\n    return value;\n  };\n\n  return (\n    <div>\n      <Select\n        options={categories}\n        onChange={setSelectedCategory}\n        value={selectedCategory}\n      />\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <LineChart\n          data={filteredData}\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"City\" />\n          <YAxis />\n          <Tooltip formatter={customFormatter} />\n          <Legend />\n          <Line\n            type=\"monotone\"\n            dataKey=\"Value\"\n            stroke=\"#8884d8\"\n            activeDot={{ r: 8 }}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default DataVisualization;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}