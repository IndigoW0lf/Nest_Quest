{"ast":null,"code":"var _jsxFileName = \"/Users/indigowolf/workspace/where_to_live/frontend/src/components/PopulationGrowthChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PopulationGrowthChart = () => {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:5000/data').then(response => response.json()).then(fetchedData => {\n      const cities = ['Kailua, HI', 'Columbia, MO', 'Charlotte, NC', 'Portland, OR', 'Seattle, WA'];\n      const years = {\n        'Population Estimates as of 2022': 'Population2022',\n        'Population, Census, 2020': 'Population2020',\n        'Population, Census, 2010': 'Population2010'\n      };\n      const processedData = cities.map(city => {\n        let cityData = {\n          City: city\n        };\n        Object.entries(years).forEach(([yearKey, chartKey]) => {\n          const yearData = fetchedData.find(d => d.Category === yearKey && d.City === city);\n          cityData[chartKey] = yearData ? parseFloat(yearData.Value.replace(/,/g, '')) : 0;\n        });\n        return cityData;\n      });\n      console.log(processedData);\n      setData(processedData);\n    }).catch(error => console.error('Error fetching data:', error));\n  }, []);\n  if (data.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 400,\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      data: data,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"Population2010\",\n        stroke: \"#8884d8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"Population2020\",\n        stroke: \"#82ca9d\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"Population2022\",\n        stroke: \"#ffc658\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(PopulationGrowthChart, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = PopulationGrowthChart;\nexport default PopulationGrowthChart;\nvar _c;\n$RefreshReg$(_c, \"PopulationGrowthChart\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","PopulationGrowthChart","_s","data","setData","fetch","then","response","json","fetchedData","cities","years","processedData","map","city","cityData","City","Object","entries","forEach","yearKey","chartKey","yearData","find","d","Category","parseFloat","Value","replace","console","log","catch","error","length","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","_c","$RefreshReg$"],"sources":["/Users/indigowolf/workspace/where_to_live/frontend/src/components/PopulationGrowthChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\n\nconst PopulationGrowthChart = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:5000/data')\n      .then((response) => response.json())\n      .then((fetchedData) => {\n        const cities = ['Kailua, HI', 'Columbia, MO', 'Charlotte, NC','Portland, OR', 'Seattle, WA'];\n        const years = {\n          'Population Estimates as of 2022': 'Population2022',\n          'Population, Census, 2020': 'Population2020',\n          'Population, Census, 2010': 'Population2010',\n        };\n        const processedData = cities.map((city) => {\n          let cityData = { City: city };\n          Object.entries(years).forEach(([yearKey, chartKey]) => {\n            const yearData = fetchedData.find(\n              (d) => d.Category === yearKey && d.City === city\n            );\n            cityData[chartKey] = yearData\n              ? parseFloat(yearData.Value.replace(/,/g, ''))\n              : 0;\n          });\n          return cityData;\n        });\n        console.log(processedData);\n        setData(processedData);\n      })\n      .catch((error) => console.error('Error fetching data:', error));\n  }, []);\n\n\n  if (data.length === 0) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={400}>\n      <LineChart\n        data={data}\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"City\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"Population2010\" stroke=\"#8884d8\" />\n        <Line type=\"monotone\" dataKey=\"Population2020\" stroke=\"#82ca9d\" />\n        <Line type=\"monotone\" dataKey=\"Population2022\" stroke=\"#ffc658\" />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default PopulationGrowthChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}