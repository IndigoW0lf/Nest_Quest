{"ast":null,"code":"var _jsxFileName = \"/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// Function to format tooltip values\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatValue = (value, category) => {\n  const categoriesWithDollar = [\"Median value of owner-occupied housing units, 2018-2022\", \"Median selected monthly owner costs -with a mortgage, 2018-2022\", \"Median selected monthly owner costs -without a mortgage, 2018-2022\", \"Median household income (in 2022 dollars)\", \"Total accommodation and food services sales, 2017 ($1,000)\", \"Total retail sales, 2017 ($1,000)\"];\n  if (categoriesWithDollar.includes(category)) {\n    return `$${Number(value).toLocaleString()}`;\n  } else {\n    return value.toLocaleString();\n  }\n};\nfunction DataVisualization() {\n  _s();\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:5000/data').then(response => response.json()).then(data => {\n      setData(data);\n      const categoryOptions = Array.from(new Set(data.map(item => item.Category))).map(category => ({\n        value: category,\n        label: category\n      }));\n      setCategories(categoryOptions);\n      if (categoryOptions.length > 0) {\n        setSelectedCategory(categoryOptions[0].value);\n      }\n    }).catch(error => console.error('Error:', error));\n  }, []);\n  const filteredData = data.filter(item => item.Category === selectedCategory);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      options: categories,\n      onChange: selectedOption => setSelectedCategory(selectedOption.value),\n      value: categories.find(option => option.value === selectedCategory)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: filteredData,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"City\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: (value, name, props) => formatValue(value, props.payload.Category)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Value\",\n          stroke: \"#8884d8\",\n          activeDot: {\n            r: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(DataVisualization, \"Q0Lx6UFegBqZj+TGeKl6qnDJNEo=\");\n_c = DataVisualization;\nexport default DataVisualization;\nvar _c;\n$RefreshReg$(_c, \"DataVisualization\");","map":{"version":3,"names":["React","useEffect","useState","Select","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","formatValue","value","category","categoriesWithDollar","includes","Number","toLocaleString","DataVisualization","_s","data","setData","selectedCategory","setSelectedCategory","categories","setCategories","fetch","then","response","json","categoryOptions","Array","from","Set","map","item","Category","label","length","catch","error","console","filteredData","filter","children","options","onChange","selectedOption","find","option","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","formatter","name","props","payload","type","stroke","activeDot","r","_c","$RefreshReg$"],"sources":["/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\n\n// Function to format tooltip values\nconst formatValue = (value, category) => {\n  const categoriesWithDollar = [\n    \"Median value of owner-occupied housing units, 2018-2022\",\n    \"Median selected monthly owner costs -with a mortgage, 2018-2022\",\n    \"Median selected monthly owner costs -without a mortgage, 2018-2022\",\n    \"Median household income (in 2022 dollars)\",\n    \"Total accommodation and food services sales, 2017 ($1,000)\",\n    \"Total retail sales, 2017 ($1,000)\",\n  ];\n\n  if (categoriesWithDollar.includes(category)) {\n    return `$${Number(value).toLocaleString()}`;\n  } else {\n    return value.toLocaleString();\n  }\n};\n\nfunction DataVisualization() {\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [categories, setCategories] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:5000/data')\n      .then((response) => response.json())\n      .then((data) => {\n        setData(data);\n        const categoryOptions = Array.from(new Set(data.map(item => item.Category)))\n                                  .map(category => ({ value: category, label: category }));\n        setCategories(categoryOptions);\n        if (categoryOptions.length > 0) {\n          setSelectedCategory(categoryOptions[0].value);\n        }\n      })\n      .catch((error) => console.error('Error:', error));\n  }, []);\n\n  const filteredData = data.filter((item) => item.Category === selectedCategory);\n\n  return (\n    <div>\n      <Select\n        options={categories}\n        onChange={(selectedOption) => setSelectedCategory(selectedOption.value)}\n        value={categories.find(option => option.value === selectedCategory)}\n      />\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <LineChart\n          data={filteredData}\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"City\" />\n          <YAxis />\n          <Tooltip formatter={(value, name, props) => formatValue(value, props.payload.Category)} />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"Value\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default DataVisualization;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}