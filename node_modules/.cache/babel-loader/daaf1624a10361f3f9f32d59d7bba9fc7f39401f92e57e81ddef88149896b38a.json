{"ast":null,"code":"var _jsxFileName = \"/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// Helper function to format the tooltip's value\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatTooltipValue = (value, name, category) => {\n  // Check if the category should display values with a dollar sign\n  const categoriesWithDollarSign = ['Median household income (in 2022 dollars)', 'Median value of owner-occupied housing units, 2018-2022']; // Add more categories as needed\n  if (categoriesWithDollarSign.includes(category)) {\n    // Format the value with a dollar sign and commas\n    return `$${value.toLocaleString()}`;\n  }\n  return value.toLocaleString();\n};\nfunction DataVisualization() {\n  _s();\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:5000/data').then(response => response.json()).then(data => {\n      // Convert string values to numbers, specifically handling values with commas\n      const numericData = data.map(item => ({\n        ...item,\n        Value: parseFloat(item.Value.replace(/[$,]/g, '')) // Remove all commas and dollar signs before converting\n      }));\n      setData(numericData);\n\n      // Extract unique categories\n      const uniqueCategories = Array.from(new Set(numericData.map(item => item.Category))).map(category => ({\n        value: category,\n        label: category\n      }));\n      setCategories(uniqueCategories);\n      if (uniqueCategories.length > 0) {\n        setSelectedCategory(uniqueCategories[0]); // Default to first category\n      }\n    }).catch(error => console.error('Error:', error));\n  }, []);\n\n  // Filter data based on selected category\n  const filteredData = selectedCategory ? data.filter(item => item.Category === selectedCategory.value) : [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      options: categories,\n      onChange: setSelectedCategory,\n      value: selectedCategory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: filteredData,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"City\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: value => formatTooltipValue(value, '', selectedCategory === null || selectedCategory === void 0 ? void 0 : selectedCategory.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Value\",\n          stroke: \"#8884d8\",\n          strokeWidth: 2 // Make the line thicker\n          ,\n          dot: {\n            stroke: '#8884d8',\n            strokeWidth: 2,\n            fill: '#ffffff'\n          },\n          activeDot: {\n            r: 8,\n            fill: '#8884d8'\n          },\n          animationDuration: 3000\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(DataVisualization, \"THWERCFx8ZeVM+Aq1J8ZTxUoJIc=\");\n_c = DataVisualization;\nexport default DataVisualization;\nvar _c;\n$RefreshReg$(_c, \"DataVisualization\");","map":{"version":3,"names":["React","useEffect","useState","Select","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","formatTooltipValue","value","name","category","categoriesWithDollarSign","includes","toLocaleString","DataVisualization","_s","data","setData","selectedCategory","setSelectedCategory","categories","setCategories","fetch","then","response","json","numericData","map","item","Value","parseFloat","replace","uniqueCategories","Array","from","Set","Category","label","length","catch","error","console","filteredData","filter","children","options","onChange","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","formatter","type","stroke","strokeWidth","dot","fill","activeDot","r","animationDuration","_c","$RefreshReg$"],"sources":["/Users/indigowolf/workspace/where_to_live/frontend/src/components/DataVisualization.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\n\n// Helper function to format the tooltip's value\nconst formatTooltipValue = (value, name, category) => {\n  // Check if the category should display values with a dollar sign\n  const categoriesWithDollarSign = [\n    'Median household income (in 2022 dollars)',\n    'Median value of owner-occupied housing units, 2018-2022',\n  ]; // Add more categories as needed\n  if (categoriesWithDollarSign.includes(category)) {\n    // Format the value with a dollar sign and commas\n    return `$${value.toLocaleString()}`;\n  }\n  return value.toLocaleString();\n};\n\nfunction DataVisualization() {\n  const [data, setData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [categories, setCategories] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:5000/data')\n      .then((response) => response.json())\n      .then((data) => {\n        // Convert string values to numbers, specifically handling values with commas\n        const numericData = data.map((item) => ({\n          ...item,\n          Value: parseFloat(item.Value.replace(/[$,]/g, '')), // Remove all commas and dollar signs before converting\n        }));\n        setData(numericData);\n\n        // Extract unique categories\n        const uniqueCategories = Array.from(\n          new Set(numericData.map((item) => item.Category))\n        ).map((category) => ({ value: category, label: category }));\n        setCategories(uniqueCategories);\n        if (uniqueCategories.length > 0) {\n          setSelectedCategory(uniqueCategories[0]); // Default to first category\n        }\n      })\n      .catch((error) => console.error('Error:', error));\n  }, []);\n\n  // Filter data based on selected category\n  const filteredData = selectedCategory\n    ? data.filter((item) => item.Category === selectedCategory.value)\n    : [];\n\n  return (\n    <div>\n      <Select\n        options={categories}\n        onChange={setSelectedCategory}\n        value={selectedCategory}\n      />\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <LineChart\n          data={filteredData}\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"City\" />\n          <YAxis />\n          <Tooltip\n            formatter={(value) =>\n              formatTooltipValue(value, '', selectedCategory?.value)\n            }\n          />\n          <Legend />\n          <Line\n            type=\"monotone\"\n            dataKey=\"Value\"\n            stroke=\"#8884d8\"\n            strokeWidth={2} // Make the line thicker\n            dot={{ stroke: '#8884d8', strokeWidth: 2, fill: '#ffffff' }}\n            activeDot={{ r: 8, fill: '#8884d8' }}\n            animationDuration={3000}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default DataVisualization;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}